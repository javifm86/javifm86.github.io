[{"url":"/blog/integrar-tailwindcss-con-hugo/","title":"Integrar TailwindCSS con Hugo","content":"Vamos a ver como configurar nuestro sitio construido con Hugo para que integre TailwindCSS. Hugo es muy flexible y te permite de una manera sencilla configurar tu sitio a tu gusto. En mi caso en particular, tengo el fichero baseof.html como esqueleto de todo mi sitio, y en el tengo un partial (que viene a ser un include) llamado head.html.\n\u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026#34;es\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r{{partial\u0026#34;head.html\u0026#34;.}}\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Realizamos la importación del fichero styles.css de la carpeta css y le pasamos la función absURL de Hugo, de manera que nos devuelve la ruta absoluta.\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\r\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt;\r{{$css:=\u0026#34;css/styles.css\u0026#34;|absURL}}\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{$css}}\u0026#34;\u0026gt; Los archivos estáticos en Hugo se guardan por defecto en la carpeta static, así que ya tenemos el primer paso, tener un fichero styles.css en la ruta /static/css/. Como este fichero va a ser generado, lo que he hecho ha sido crearme una carpeta llamada static-src donde tener los fuentes de mis ficheros estáticos que posteriormente voy a procesar.\nAntes de continuar, vamos a instalar las dependencias que vamos a necesitar con npm.\nnpm install tailwindcss --save\rnpm install postcss postcss-cli @fullhuman/postcss-purgecss autoprefixer watch cross-env cssnano --save-dev Veamos qué son estas dependencias:\n tailwindcss: El framework CSS. postcss postcss-cli: PostCSS se utiliza para compilar Tailwind y además añadiremos algunos plugins para el resultado final de nuestro CSS. @fullhuman/postcss-purgecss: Tailwind genera muchísimas clases, utilizaremos este plugin para eliminar las clases que no utilicemos de Tailwind y reducir el tamaño final de nuestro CSS. autoprefixer: Opcional, para poner prefijos a nuestra hoja de estilos. watch: Paquete de node que nos permite ejecutar tareas cuando algún fichero sea modificado. Viene con un cli que utilizaremos en un script npm. cross-env: Paquete multiplataforma para dar valor a la variable de entorno NODE_ENV. cssnano: Minimizador para CSS.  Con todas estas dependencias ya disponemos de las piezas del puzzle necesarias para generar un fichero CSS con Tailwind y solo con las clases que utilicemos, no todo el framework. Generamos un fichero de configuración de Tailwind vacío, para en caso de querer personalizar las opciones que vienen por defecto en el framework podamos. Tan solo ejecutaremos:\nnpx tailwind init Y nos generará un fichero tailwind.config.js vacío en el raíz: module.exports = {\rtheme: {\rextend: {}\r},\rvariants: {},\rplugins: []\r} \nYa podemos crear nuestro fichero /static-src/styles.css invocando a las directivas de Tailwind. Además podremos añadir otros estilos CSS que queramos, utilicen Tailwind o no.\n@tailwind base;\r@tailwind components;\r/* Custom CSS */\ra.tag {\r@apply bg-gray-200 rounded-full px-3 py-1 font-semibold text-gray-700;\r}\ra.tag:hover {\r@apply underline;\r}\r/* Custom CSS end */\r@tailwind utilities; Tailwind es compilado utilizando PostCSS, por lo que puedes integrar facilmente otros plugins. En nuestro caso vamos a meter autoprefixer, para que se generen automáticamente los prefijos de las propiedades que lo necesiten y además, cuando compilemos para producción vamos a utilizar purgecss y cssnano para reducir al máximo el tamaño de nuestra hoja de estilos. Veamos el fichero de configuración de PostCSS (postcss.config.js, ubicado en el directorio raíz):\nconst purgecss = require(\u0026#39;@fullhuman/postcss-purgecss\u0026#39;)({\rcontent: [\u0026#39;../../content/**/*.md\u0026#39;, \u0026#39;./layouts/**/*.html\u0026#39;],\rdefaultExtractor: content =\u0026gt; content.match(/[A-Za-z0-9-_:/]+/g) || []\r});\rmodule.exports = {\rplugins: [\rrequire(\u0026#39;tailwindcss\u0026#39;),\rrequire(\u0026#39;autoprefixer\u0026#39;),\r...(process.env.NODE_ENV === \u0026#39;production\u0026#39; ? [purgecss, require(\u0026#39;cssnano\u0026#39;)] : [])\r]\r};  A la hora de purgar el CSS, buscaremos en todos nuestros ficheros con extensión .md en la carpeta content y .html en layouts. Si trabajas con ficheros javascript u otras rutas donde añadas clases CSS, deberás ajustar el array de rutas. Este snippet considera que estamos trabajando con un theme dentro de la carpeta /themes/nombretheme/, si trabajamos directamente desde la carpeta layouts de Hugo (como he hecho yo en este blog) habría que ajustar las rutas:\nconst purgecss = require(\u0026#39;@fullhuman/postcss-purgecss\u0026#39;)({\rcontent: [\u0026#39;./content/**/*.md\u0026#39;, \u0026#39;./layouts/**/*.html\u0026#39;, \u0026#39;./static/**/*.js\u0026#39;],\rdefaultExtractor: content =\u0026gt; content.match(/[A-Za-z0-9-_:/]+/g) || []\r});  Con todo esto ya podemos generar nuestros scripts npm en el fichero package.json:\n{\r\u0026#34;name\u0026#34;: \u0026#34;hugo-tailwindcss\u0026#34;,\r\u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;,\r\u0026#34;description\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;,\r\u0026#34;scripts\u0026#34;: {\r\u0026#34;css:watch\u0026#34;: \u0026#34;node_modules/.bin/watch \\\u0026#34;npm run cssdev\\\u0026#34; ./static-src/css\u0026#34;,\r\u0026#34;cssdev\u0026#34;: \u0026#34;cross-env NODE_ENV=development npm run css:build\u0026#34;,\r\u0026#34;cssprod\u0026#34;: \u0026#34;cross-env NODE_ENV=production npm run css:build\u0026#34;,\r\u0026#34;css:build\u0026#34;: \u0026#34;node_modules/.bin/postcss static-src/css/styles.css -o static/css/styles.css\u0026#34;\r},\r\u0026#34;author\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;license\u0026#34;: \u0026#34;MIT\u0026#34;,\r\u0026#34;dependencies\u0026#34;: {\r\u0026#34;tailwindcss\u0026#34;: \u0026#34;^1.1.4\u0026#34;\r},\r\u0026#34;devDependencies\u0026#34;: {\r\u0026#34;@fullhuman/postcss-purgecss\u0026#34;: \u0026#34;^2.0.5\u0026#34;,\r\u0026#34;autoprefixer\u0026#34;: \u0026#34;^9.7.4\u0026#34;,\r\u0026#34;cross-env\u0026#34;: \u0026#34;^6.0.3\u0026#34;,\r\u0026#34;cssnano\u0026#34;: \u0026#34;^4.1.10\u0026#34;,\r\u0026#34;postcss\u0026#34;: \u0026#34;^7.0.26\u0026#34;,\r\u0026#34;postcss-cli\u0026#34;: \u0026#34;^7.1.0\u0026#34;,\r\u0026#34;watch\u0026#34;: \u0026#34;^1.0.2\u0026#34;\r}\r} Tenemos principalmente 3 tareas: - css:build:dev: Compila el fichero CSS en modo desarrollo, para mayor agilidad tendremos todo Tailwind por defecto sin necesidad de minimizar y purgar clases. - css:build:prod: Compila, purga y minimiza el fichero CSS para obtener la hoja de estilos optimizada para producción. - css:watch: Observa la carpeta ./static-src/css para en caso de cambios volver a compilar el fichero. Muy útil para no lanzar manualmente la tarea css:build:dev cada vez que hagamos cambios.\nCon estas tareas ya podemos generar nuestra hoja de estilos. He creado un repositorio en Github con un theme que incorpora estos scripts como punto de partida para poder crear tu propio theme para Hugo. Puedes probarlo con algo de contenido de prueba que he creado en otro repositorio para verlo en acción.\nNOTA: Es posible integrar todo el proceso gracias al pipe postCSS de Hugo. Te obliga a tener instalado globalmente postcss-cli además de los plugins que uses. Yo personalmente prefiero no tener instalados globalmente paquetes y poder personalizar todo el proceso, pero es una opción a tener en cuenta que nos brinda Hugo.\n","summary":"Vamos a ver como configurar nuestro sitio construido con Hugo para que integre TailwindCSS."},{"url":"/blog/nueva-web-con-hugo/","title":"Nueva web con Hugo","content":"Estreno nueva web con un propósito: volver de nuevo a la actividad de mi blog personal en el que crear de vez en cuando algún artículo, donde tener a mano tutoriales con las nuevas cosas que voy aprendiendo.\nAtrás queda mi antiguo blog construido con Wordpress. Siempre quise diseñar mi propio sitio desde cero y finalmente lo he hecho. A través de este y los próximos artículos voy a resumir algunas de las cosas que he aprendido diseñando esta página.\nEn primer lugar tenía que elegir con qué herramienta gestionar mi página personal, en su día tenía en mente desarrollar mi propio tema para Wordpress, pero con el paso del tiempo han ido apareciendo muchas otras alternativas y finalmente me decidí por utilizar alguna herramienta generadora de sitios estáticos (en inglés con las siglas SSG).\nBusqué información de las ventajas de los distintos generadores y de casualidad me topé con una herramienta escrita en Go que es muy rápida, Hugo, así que empecé a trastear y probar. Cuando me quise dar cuenta me encontraba cómodo y avanzaba rápido, así que me decanté por Hugo.\nPara poder trabajar con Hugo, lo primero que hice fué instalarlo y posteriormente seguir esta guía para poder crear un blog con Hugo desde cero. A partir de ahí Hugo te permite hacer prácticamente lo que quieras, es bastante flexible, puedes instalar temas, utilizar shortcodes para sintáxis coloreada de código, embeber contenido de servicios populares como Youtube, Twitter, Instagram, etc.\nComo Hugo genera un sitio estático, la opción para hosting más sencilla es Github pages. Para subir una nueva versión del sitio simplemente copio la carpeta public al repositorio, y al hacer commit y push se despliega automáticamente.\nFinalmente, me quedaba la decisión de cómo iba a organizar la maquetación del sitio. Al ser un sitio pequeño, podría haber maquetado todo desde cero con CSS o SASS, pero llevo un tiempo oyendo hablar de un framework CSS llamado Tailwind CSS que utiliza un concepto denominado \u0026ldquo;utility first\u0026rdquo;. Después de haber trabajado con Bootstrap, no me apetecía aprender un nuevo framework pero me decidí a darle una oportunidad. Al empezar mi primer pensamiento fue que todo quedaba muy sucio con esa ristra de clases por todos lados, pero con el paso del tiempo me fui acostumbrando y le fui cogiendo el gustillo, hasta el punto de que he quedado encantado.\nTailwind no es un framework como Boostrap, no te da componentes creados con una sintáxis marcada. Tailwind te ofrece un conjunto de utilidades CSS atómicas con las que poder crear tus propios componentes de manera consistente. Te puedes concentrar en crear, no pierdes tiempo en buscar la mejor manera de nombrar las clases, no repites una y otra vez las mismas propiedades CSS que hacen que los ficheros CSS crezcan sin control.\nTailwind te provee de un conjunto de posibilidades entre las que elegir, distintos tamaños de texto, una paleta de colores, sombras, escala para margins y paddings\u0026hellip; Y además es completamente personalizable, Tailwind está construido sobre PostCSS y puedes mediante su fichero de configuración sobreescribir o extender los valores que desees. Tailwind te da una base sobre la que poder crear tu sistema de diseño para una web totalmente personalizada. Pruébalo y no te defraudará, de primeras es normal ser reticente.\nEn próximos artículos voy a ir desgranando cómo me he configurado Hugo a mi gusto, cosas que he aprendido y que he necesitado de mucho tiempo para resolver.\n","summary":"Estreno nueva web con un propósito: volver de nuevo a la actividad de mi blog personal en el que crear de vez en cuando algún artículo, donde tener a mano tutoriales con las nuevas cosas que voy aprendiendo."},{"url":"/blog/activar-https-con-lets-encrypt/","title":"Activar https con Let’s Encrypt","content":"Let\u0026#8217;s Encrypt es un proveedor gratuito de certificados TLS/SSL que nos brinda la posibilidad de activar https en nuestro servidor para nuestros dominios. El proceso está automatizado tanto para Apache como Nginx, en mi caso voy a utilizar Cerbot para instalarlo en mi servidor Nginx.\nCertbot es un software que es actualizado bastante amenudo por sus desarrolladores. Si queremos disfrutar de la versión más actualizada, deberemos añadir su repositorio ya que si tiramos de los de Ubuntu, lo más normal es que tengan versiones más antiguas. Para ello:\nsudo add-apt-repository ppa:certbot/certbot Aceptaremos las condiciones del servicio para poder actualizar los repositorios del sistema operativo.\nsudo apt-get update Y finalmente instalaremos Certbot.\nsudo apt-get install python-certbot-nginx Certbot ya está listo, ahora simplemente comprobaremos que tenemos definido en nuestro fichero de configuración de Nginx la clave server_name con el dominio que vamos a utilizar.\nVeremos la configuración del servidor por defecto en el fichero default, o si está en otro dominio configurado, iremos a ese fichero.\nsudo nano /etc/nginx/sites-available/default server_name example.com www.example.com; Si ya está configurado, no es necesario hacer nada. En caso contrario añadimos nuestro dominio y ejecutamos los siguientes comandos para comprobar que la configuración de Nginx introducida no da problemas, y si es así recargamos para refrescar la nueva configuración:\nsudo nginx -t\rsudo systemctl reload nginx Por último antes de obtener el certificado, vamos a añadir en nuestro firewall ufw que permita el trafico https. Para ello podemos ejecutar los siguientes comandos para añadir el perfil Nginx full, que incorporta tanto http como https y eliminaremos el http que sobra una vez añadido el anterior:\nsudo ufw allow \u0026#39;Nginx Full\u0026#39;\rsudo ufw delete allow \u0026#39;Nginx HTTP\u0026#39; Comprobamos:\nsudo ufw status  Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx Full ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx Full (v6) ALLOW Anywhere (v6)  Finalmente lanzaremos el proceso para obtener el certificado y que se renueve automaticamente.\nsudo certbot --nginx -d example.com -d www.example.com Se nos pedirá una dirección de correo electrónico y, si todo va bien, nos saldrá una pregunta solicitandonos elegir entre si queremos redireccionar el tráfico http a https o no. Elegimos la deseada, en mi caso elegí la segunda y pulsamos enter.\n Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. ------------------------------------------------------------------------------- 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you're confident your site works on HTTPS. You can undo this change by editing your web server's configuration. ------------------------------------------------------------------------------- Select the appropriate number [1-2] then [enter] (press 'c' to cancel):   IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/example.com/fullchain.pem. Your cert will expire on 2017-10-23. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the \"certonly\" option. To non-interactively renew *all* of your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le  De esta manera ya se han descargado e instalado los certificados para el dominio, puedes ir al navegador e introducir el dominio para comprobar si se ha actualizado el indicador de seguridad.\nSi no todo fue correctamente y has obtenido un error como el siguiente:\nError: duplicate listen options for [::]:443 Hay una solución, que consiste en abrir el fichero de configuración de Nginx para el dominio y eliminar listen [::]:80 pero dejando listen 80;\nAl volver a ejecutar de nuevo y eligiendo la opción de reinstalar los certificados debería de funcionar. Los certificados son válidos durante 90 días, certbot se encarga de lanzar un proceso que comprueba automáticamente 2 veces por día si quedan menos de 30 días para la expiración, de ser así los certificados serán renovados. Podemos comprobar que todo funciona correctamente ejecutando:\nsudo certbot renew --dry-run Puedes comprobar en el directorio /etc/cron.d que hay un script llamado certbot que se encarga de ello. Referencias interesantes:\n Certbot Error al obtener certificados Tutorial en inglés en Digital Ocean  Ya puedes disfrutar de conexión https para tu dominio.\n","summary":"Let&#8217;s Encrypt es un proveedor gratuito de certificados TLS/SSL que nos brinda la posibilidad de activar https en nuestro servidor para nuestros dominios."},{"url":"/blog/configuraci%C3%B3n-servidor-vps-en-digital-ocean-i/","title":"Configuración servidor VPS en Digital Ocean I","content":" Me he decidido a contratar un VPS en Digital Ocean, a ver si de una vez por todas en mi escaso tiempo libre, puedo ir desarrollando un portfolio y aprendiendo cosas nuevas. Vamos a ver un listado de la configuración de un VPS desde cero, partiendo de una instalación limpia de Ubuntu 16.04. Vayamos por partes:\nConfiguración inicial del servidor En este apartado hablaremos de la configuración incial básica para que nuestro VPS sea más seguro. Lo primero de todo es conectarnos a nuestro servidor, para ello utilizaremos ssh para establecer conexión remota por consola, con el usuario root, hasta que creemos otro usuario. Podemos conectarnos desde la consola de nuestro sistema operativo (Mac, Linux), o utilizar alguna utilidad como Putty, que es un cliente SSH gratuito y archiconocido para Windows. Para conectarnos deberemos saber la dirección IP pública de nuestro servidor y ejecutar el siguiente comando:\nssh root@your_server_ip Al ser la primera conexión, veremos un mensaje informándonos que no se puede asegurar la autenticidad de la conexión, escribiremos yes para establecer conexión:\nThe authenticity of host '1XX.XXX.XXX.XXX' can't be established. ECDSA key fingerprint is SHA256:71mD5o12895hg7tu85lPFDY1khktRcuPnsfCQFrTaK0. Are you sure you want to continue connecting (yes/no)? Y se nos solicitará cambiar la contraseña root por seguridad. El usuario root tiene todos los privilegios y no es una buena idea hacer un uso regular de él ya que por accidente podemos ejecutar acciones destructivas e irreversibles. Por este motivo, el siguiente paso será crear otro usuario para conectarnos normalmente con él, para ello ejecutamos el siguiente comando y contestamos unas sencillas preguntas:\nadduser mike Tras crear nuestro nuevo usuario, le otorgaremos permisos de superusuario para poder ejecutar comandos con privilegios de root anteponiendo la palabra sudo.\nusermod -aG sudo mike Abriremos una nueva terminal, y probaremos a conectar con nuestro nuevo usuario para verificar que podemos hacer login correctamente:\nssh mike@your_server_ip Todo servidor web que se precie debe contar con un Firewall, hay muchas opciones, una de las más sencillas y que viene ya incluida en Ubuntu es UFW. Con UFW podremos controlar qué servicios tienen acceso a la conexión. Para ver la lista de aplicaciones registradas en el firewall, ejecutamos el siguiente comando:\nsudo ufw app list Obteniendo como resultado:\n Available applications: OpenSSH  Es muy importante que permitamos el acceso a OpenSSH, de lo contrario la próxima vez que vayamos a conectarnos no podremos, algo que no debe ocurrir. Para ello añadimos OpenSSH:\nsudo ufw allow OpenSSH Y sólo después de esto activaremos el firewall:\nsudo ufw enable En cualquier momento podemos comprobar los aplicaciones que hemos permitido o denegado a través del comando:\nsudo ufw status  Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6)  A partir de ahora será necesario que en futuras aplicaciones y/o servicios instalados, permitamos que realice conexiones añadiendolas a ufw.\nInstalación de LEMP LEMP son las siglas que indican un servidor con sistema operativo Linux, Nginx como servidor web, PHP como procesador dinámico y MySQL como base de datos para el backend. Algo muy común por ejemplo a la hora de tener una página en WordPress. Vamos a ver como instalar en nuestro VPS estos paquetes:\nInstalar Nginx Nginx es un servidor web de código abierto, uno de los más usados en el mundo junto con Apache. Cada uno tiene sus pros y sus contras, yo he optado por Nginx. Antes de nada, actualizaremos el repositorio apt de nuestro servidor, y posteriormente instalaremos nginx:\nsudo apt-get update\rsudo apt-get install nginx Una vez instalado se inicia el servicio automaticamente, acto seguido deberemos registrar nginx en ufw:\nsudo ufw allow \u0026#39;Nginx HTTP\u0026#39;\rsudo ufw status  Status: active To Action From -- ------ ---- OpenSSH ALLOW Anywhere Nginx HTTP ALLOW Anywhere OpenSSH (v6) ALLOW Anywhere (v6) Nginx HTTP (v6) ALLOW Anywhere (v6)  Hecho esto, ya solo deberemos acceder a la dirección IP pública de nuestro VPS para ver la página de bienvenida de nginx.\nInstalar MySQL Para instalarlo simplemente ejecutamos:\nsudo apt-get install mysql-server Nos pedirá una contraseña para el usuario root. Una vez instalado es altamente recomendable ejecutar un script de seguridad para eliminar configuraciones inseguras, usuarios de ejemplo y bases de datos de prueba.\nsudo mysql_secure_installation Tan sólo hay que seguir el asistente introduciendo el carácter y para contestar que sí.\nInstalar PHP Nginx por defecto no cuenta con procesamiento para PHP. Para ello deberemos instalar php-fpm. Tecleamos en la terminal:\nsudo apt-get install php-fpm php-mysql A continuación editaremos la configuración de PHP para hacerla más segura:\nsudo nano /etc/php/7.0/fpm/php.ini Pulsando F6, buscaremos la siguiente cadena: \u0026#8220;cgi.fix_pathinfo\u0026#8221;. Pondremos su valor en 0 para desactivarlo, ya que con esta configuración activada podría permitirse a un usuario malintencionado ejecutar scripts a los que normalmente no debería tener acceso. Cerramos, guardamos y reiniciamos el servicio:\nsudo systemctl restart php7.0-fpm Habilitar PHP en Nginx Con Nginx podemos tener distintas configuraciones de servidor para distintos sitios (dominios, subdominios\u0026#8230;). Inicialmente solo tendremos un sitio, llamado default. Vamos a habilitar PHP editando el fichero default, además de algunas configuraciones de seguridad:\nsudo nano /etc/nginx/sites-available/default Añadiremos index.php como posible entrada por defecto de un directorio, podremos modificar server_name, para poder acceder a través de dominio en lugar de nuestra IP pública, que es la que vendrá por defecto. Habilitaremos PHP con las líneas marcadas en rojo y evitaremos el procesamiento de archivos .htaccess por motivos de seguridad.\nserver { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html index.php; # server_name tudominio.com; server_name 1XX.XX.XX.XX; location / { try_files $uri $uri/ =404; } # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.0-fpm.sock; } # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # location ~ /\\.ht { deny all; } }  Cerramos, guardamos el fichero y haremos un test para verificar que no hay ningún error de sintáxis en la configuración de Nginx:\nsudo nginx -t Si no hay errores, reiniciamos el servicio para que pueda aplicarse la nueva configuración:\nsudo systemctl reload nginx Para finalizar, iremos a la carpeta /var/www/html y crearemos un fichero index.php, con el siguiente contenido:\n\u0026lt;?php\rphpinfo();\r?\u0026gt;  Ahora simplemente accediendo a nuestra dirección IP pública o dominio, deberemos ver una página con toda la configuración de PHP. Cuando hayamos verificado que está funcionando, borraremos el fichero y ya tendremos nuestro servidor LEMP con la configuración inicial para poder hacer cosas.\n","summary":"Me he decidido a contratar un VPS en Digital Ocean, a ver si de una vez por todas en mi escaso tiempo libre, puedo ir desarrollando un portfolio y aprendiendo cosas nuevas."},{"url":"/blog/direcci%C3%B3n-ip-fija-para-raspberry-en-raspbian/","title":"Dirección IP fija para Raspberry en Raspbian","content":"Por comodidad a la hora de disfrutar de nuestra Raspberry lo más conveniente es asignarle una IP fija. De esa manera siempre podremos conectarnos a la misma dirección y no dependeremos de que el servidor DHCP nos dé una distinta cada vez. Esta configuración es muy básica, sencilla y muy necesaria a la hora de conectarnos remotamente o configurar otra serie de servicios.\nVamos a ver como en unos sencillos pasos lo hacemos en Raspbian. Los pasos son para la interfaz ethernet, ya que en mi caso es la que veo que tiene mayor sentido, pues tengo conectada la raspberry al lado del router por cable.\nEditaremos el fichero dhcpcd.conf con nano u otro cualquier editor.\nsudo nano /etc/dhcpcd.conf Y añadiremos al final del fichero las siguientes líneas (asegurate de poner una dirección dentro de tu red y la IP de tu router):\ninterface eth0\rstatic ip_address=192.168.1.50\rstatic routers=192.168.1.1\rstatic domain_name_servers=8.8.8.8\rstatic domain_search=8.8.4.4 Guardamos y salimos, para comprobar el fichero interfaces, que tendrá este aspecto:\n# interfaces(5) file used by ifup(8) and ifdown(8)\r# Please note that this file is written to be used with dhcpcd\r# For static IP, consult /etc/dhcpcd.conf and \u0026#39;man dhcpcd.conf\u0026#39;\r# Include files from /etc/network/interfaces.d:\rsource-directory /etc/network/interfaces.d\rauto lo\riface lo inet loopback\riface eth0 inet manual\rallow-hotplug wlan0\riface wlan0 inet manual\rwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\rallow-hotplug wlan1\riface wlan1 inet manual\rwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf La parte importante es iface eth0 inet manual, donde indicamos que la IP sea manual. Lo más probable es que ya esté bien y no tengas que tocarlo. Guardando y reiniciando ya deberíamos disponer de nuestra IP fija.\n","summary":"Por comodidad a la hora de disfrutar de nuestra Raspberry lo más conveniente es asignarle una IP fija."},{"url":"/blog/configurar-teclado-conexi%C3%B3n-remota-raspberry-pi-con-xdrp-km-040a.ini/","title":"Configurar teclado conexión remota Raspberry Pi con XDRP – km-040a.ini","content":"Si te conectas de manera remota a tu raspberry, a través de la aplicación de Conexión a escritorio remoto de Windows por ejemplo, tarde o temprano te darás cuentas que si no utilizas un teclado inglés, muchos de los símbolos y teclas están cambiados. Puede convertirse en una odisea el simple hecho de introducir el password de conexión si este tiene algún caracter especial.\n¿Pero cómo es esto posible? Si al configurar mi raspberry me preocupé de cambiar la configuración de teclado a español (o el idioma que sea). Bien esto sucede por tener el teclado conectado fisicamente, pero si desconectas teclado y ratón y te conectas remotamente, la raspberry tomará por defecto que utilizas un teclado inglés americano. Veamos como solucionarlo.\nSi estás conectado en remoto, ten en cuenta que te deberás conectar fisicamente (con un teclado) a la raspberry, de lo contrario los comandos necesarios para iniciar la configuración no funcionarán. Una vez conectado físicamente, veamos paso a paso como proceder:\n Ejecuta el siguiente comando, con el cual indicamos que queremos usar un teclado español de españa. setxkbmap -layout \u0026#39;es,es\u0026#39;  Navega al directorio _/etc/xrdp_, haz `ls` y comprueba que no haya un fichero **km-040a.ini**, que es el correspondiente al teclado español. Si lo hay, no está de más de hacer un backup por si acaso. Lo normal es que no lo haya, asi que a través del siguiente comando lo crearemos. xrdp-genkeymap /etc/xrdp/km-040a.ini  Este es el fichero que se encarga de establecer los mapeos a las teclas. Crearemos un backup de él antes de modificarlo. Desde la consola, con sudo ejecutaremos: sudo cp km-040a.ini km-040a.ini.backup  Con esto tendríamos ya funcionando el teclado, pero no del todo. Seguramente muchos símbolos ya se hayan corregido, pero combinaciones con la tecla _AltGr_, y las flechas arriba, abajo, derecha, izquierda puede que no funcionen. Si este es el caso, hay que editar el fichero **km-040a.ini** y terminar de mapear todo correctamente. Por suerte pude encontrar por internet un fichero que funcionaba bien con mi teclado, y simplemente lo sobreescribí.  Si estás buscando algún otro fichero de configuración para otro teclado, puedes probar a ver si lo encuentras desde este repositorio. Si no está, deberás averiguar el nombre de fichero para tu teclado en función del país, y seguramente buscando en Google alguien haya encontrado la solución.\nYo pude solucionarlo gracias a dos artículos en inglés:\n Conexión escritorio remoto en Ubuntu. Teclas especiales en XDRP.  ","summary":"Si te conectas de manera remota a tu raspberry, a través de la aplicación de Conexión a escritorio remoto de Windows por ejemplo, tarde o temprano te darás cuentas que si no utilizas un teclado inglés, muchos de los símbolos y teclas están cambiados."},{"url":"/blog/conexi%C3%B3n-remota-a-raspberry-pi/","title":"Conexión remota a Raspberry Pi","content":"Una vez finalizada la configuración básica, vamos a ver la manera de conectarnos remotamente, sin necesidad de tener enchufado ratón y teclado a la Raspberry, ni tan siquiera un monitor HDMI (si no quieres). Por defecto raspbian Pixel trae instalado el paquete RealVNC para conexiones remotas. Este paquete es incompatible con xrdp, que es el protocolo que utiliza la herramienta de Conexión a Escritorio remoto que trae instalada Windows por defecto.\nSi no dispones de Windows no te preocupes, vamos a ver varias maneras distintas de conexión en remoto. Para continuar con la configuración instalaremos el paquete tightvncserver, que se encarga automaticamente de desinstalar RealVNC . Para instalar, desde la terminal simplemente ejecutamos:\nsudo apt install -y tightvncserver La opción -y simplemente responde que sí a cualquier pregunta planteada. Finalmente instalamos xrdp:\nsudo apt install -y xrdp Para poder acceder facilmente a nuestra Raspberry desde Windows, podemos instalar Samba. Así en lugar de recordar la IP, podemos recordar solamente el nombre que le hayamos puesto en el apartado hostname de la pestaña Sistema dentro de la configuración de la raspberry. Especialmente útil si tiene IP dinámica y no fija. En mi caso mi Raspbery se llama \u0026#8220;rasp\u0026#8221;. Para instalar samba:\nsudo apt install -y samba Desde ahora, en una máquina Windows podremos acceder facilmente al miniordenador. Probamos desde cmd de Windows a hacer ping:\nping rasp Para conectar remotamente, disponemos de 2 opciones:\nDesde Windows no es necesario ningún paso adicional, simplemente abriremos la herramienta de Conexión a Escritorio remoto. Pondremos la IP o el hostname que le hayamos dado, podremos configurar una serie de opciones como Pantalla (tamaño del escritorio remoto, calidad del color\u0026#8230;), y una vez esté a nuestro gusto pulsamos en Conectar.\nEs posible que salte un aviso informando de que no se puede comprobar la identidad del equipo remoto, pulsaremos Sí para establecer la conexión. Si todo ha ido bien, veremos una pantalla donde introducir nuestras credenciales de acceso a la Raspberry. Usuario pi y contraseña raspberry, si es que no la has cambiado aún(¡deberías!).\nDespués de escribir usuario y password, al dar OK veremos el escritorio de nuestra Raspberry, y podremos interactuar con ella desde la interfaz gráfica.\nPara conectar desde cualquier plataforma, podemos utilizar VNC. Yo lo utilizo desde mi móvil android, con la aplicación VNC Viewer. Hay distintas aplicaciones para las distintas plataformas, incluso hay una extensión para Google Chrome. Para ello deberemos dar algún paso más, nada complicado.\nEn la consola de nuestra Raspberry, ejecutaremos el comando vncpasswd, y nos pedirá establecer una contraseña que será solicitada en el momento que accedamos por remoto. Además nos dará la posibilidad de crear una contraseña unicamente para ver la Raspberry pero sin manipular, le decimos que no pues no nos interesa.\nAhora crearemos un escritorio remoto simplemente ejecutando vncserver, y en consola veremos el número de escritorio creado, la primera vez será :1, la siguiente :2, etc. Desde nuestra red local simplemente en nuestra herramienta VNC, ponemos la IP de la Raspberry, seguido del número de escritorio. Si es el escritorio 1, y nuestra IP es 192.168.1.50, deberemos conectar a 192.168.1.50:1.\nSi estamos conectando desde fuera de nuestra red, a través de internet, el número de escritorio correspondería con el puerto 5901 para el escritorio 1. 5902 para el 2, etc., ya que el puerto de VNC es el 5900. Pero esto lo explicaré con mayor detalle en otras entradas, para conectar remotamente desde fuera de casa.\nTras pulsar conectar, nos solicitará la password y después de introducirla conectaremos remotamente. Puedes crear distintos tipos de escritorios remotos con VNC, para ver las distintas opciones lo mejor es consultar la ayuda con vncserver --help.\nHasta aquí la manera de conectar a través de interfaz gráfica, si bien no es la conexión que más amenudo uso, puntualmente me viene bien. La manera más habitual de conectar, como hacen muchos usuarios de Linux es a través de SSH, conectaremos a la consola de nuestra Raspberry y dispondremos de la línea de comandos para ejecutar lo que queramos.\nPara ello se puede hacer uso de una herramienta llamada Putty, o de cualquier línea de comandos. En Putty simplemente ponemos la dirección IP de la máquina a la que nos vamos a conectar, elegimos ssh y dejamos el puerto por defecto que es el 22. En consola normal, ejecutaremos el comando ssh seguido de la dirección IP: ssh 192.168.1.50.\nElegimos Open, introducimos nuestras credenciales y ya estaremos en nuestra máquina.\nNOTA: Antes de intentar conectar por SSH o VNC, es importante comprobar en la configuración de la raspberry que dichos servicios están habilitados, recientemente Raspbian ha cambiado y por defecto trae ssh deshabilitado.\n","summary":"Una vez finalizada la configuración básica, vamos a ver la manera de conectarnos remotamente, sin necesidad de tener enchufado ratón y teclado a la Raspberry, ni tan siquiera un monitor HDMI (si no quieres)."},{"url":"/blog/raspberry-pi-primeros-pasos-2/","title":"Raspberry pi, primeros pasos (2)","content":" Una vez tenemos arrancada nuestra Raspberry con Raspbian aparece el escritorio. Lo primero que deberemos hacer será aplicar una configuración básica, para ello la última versión de Raspbian cuenta con una herramienta visual llamada \u0026#8220;Configuración de Raspberry pi\u0026#8221;, que encuentras en Menú / Preferencias.\nNOTA: He tomado los pantallazos después de configurar mi raspberry, inicialmente todo se encuentra en inglés.\nUna vez arrancamos la aplicación, nos aparecerá la siguiente pantalla:\nDentro de la pestaña sistema.\n Clave: Muy importante cambiar la contraseña por defecto para el usuario pi, que es raspberry. Cabe destacar que hace poco los desarrolladores de Raspbian optaron por deshabilitar SSH por defecto, ya que se producen bastantes ataques que logran acceder a raspberries que no han cambiado la contraseña por defecto. Parece de sentido común por seguridad cambiar esta contraseña por otra. Puedes ampliar la información sobre gestión de usuarios en la documentación oficial. Hostname: Para acceder remotamente, en lugar de teclear la ip. Puedes poner lo que más te guste, en mi caso acorté a rasp. Iniciar en: Poco que explicar, para arrancar en escritorio o línea de comandos. Si arrancas en consola siempre puedes iniciar la interfaz gráfica con el comando startx. Como para casi todo me conecto desde remoto, yo he elegido consola. Red al iniciar: Lo he marcado, inicialmente no es necesario, pero para algunos servicios como el servidor web que inicia Transmission (cliente de torrent), es necesario. El resto de parámetros no necesitan explicación. En la imagen no aparece la opción Expandir sistema de ficheros, supongo que es porque ya lo hice. Esta opción es para que se utilice toda la capacidad de la tarjeta microSD en el sistema, si cambias de tarjeta por una de mayor capacidad, no olvides aplicar la expansión para aprovechar todo el espacio.  En Interfaces podemos activar/desactivar una serie de servicios, yo activé ssh, que es lo que uso el 90% del tiempo para manejar la raspberry.\nRendimiento\nMemoria GPU, viene por defecto con 64MB, si vas a utilizar Kodi para reproducir HD y/o emuladores de consola, será necesario aumentar este valor. Yo he puesto 128MB para Kodi, no descarto aumentarlo un poco más. Si no tienes estos requerimientos, 64MB es más que suficiente. El valor máximo para Raspberry Pi 3 es de 944, según la documentación oficial (buscar gpu_mem).\nPor último encontramos la pestaña Localización, donde configurar la zona horaria, locale, teclado y país de la Wifi. Puse todo en español. Para configurar el teclado es necesario que esté enchufado físicamente.\nUna vez configurado todo a nuestro gusto, pulsamos Aceptar para que se apliquen los cambios.\nConfiguración de Internet Para obtener salida a Internet tenemos 2 opciones, conectar por cable ethernet o a través de Wifi. Yo tengo el router al lado de la raspberry, asi que está conectada por cable. Si en tu caso no tienes cerca para enchufar por cable, puedes acceder a través de Wifi, en el icono de al lado de Bluetooth puedes configurar tu red Wifi.\nUna vez conectado, puedes abrir el navegador y comprobar la conexión a internet. También puedes abrir una terminal y hacer ping: ping google.com\nConfigurada la salida a Internet, el siguiente paso es actualizar el sistema. Estos comandos deberían ejecutarse de vez en cuando, para estar al día en actualizaciones de seguridad.\nsudo apt-get update\rsudo apt-get dist-upgrade El primero actualiza el listado de paquetes, el segundo instala las actualizaciones. Si quieres ejecutar ambos y que conteste sí a las preguntas, puedes poner en una sola línea:\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get -y dist-upgrade Con todo esto ya tenemos la configuración básica inicial. Las posibilidades que brinda este mini ordenador son enormes, a partir de aquí hay que adpatarla a nuestras necesidades. Los usos más comunes son para servidores de descarga, servidor de contenido multimedia, domótica, etc. En próximas entradas explicaré configuración de algunos servicios que estoy usando.\n","summary":"Una vez tenemos arrancada nuestra Raspberry con Raspbian aparece el escritorio."},{"url":"/blog/raspberry-pi-primeros-pasos/","title":"Raspberry Pi, primeros pasos","content":" Recientemente me he animado a adquirir el mini ordenador más famoso actualmente, la archiconocida Raspberry Pi. Seguramente hayas oído hablar de ella, lleva muchos años y dispone de varios modelos. Hay multitud de información en la red, yo actualmente no conozco mucho, pero buscando por internet puedes encontrar de todo, y cada persona va adaptando su Raspberry Pi a sus necesidades. En mi caso tan solo quiero trastear, automatizar ciertas tareas cotidianas y poner en marcha cualquier idea que se me pase por la mente.\nHay multitud de distribuciones, tanto oficiales como no oficiales, yo en mi caso me he decantado por la más completa, Raspbian. Vamos a ver una serie de pasos básicos para instalar Raspbian y arrancar nuestra Raspberry.\nSi aún no tienes tu Raspberry, vamos a repasar brevemente el material necesario.\n Raspberry Pi 3 B, el último modelo. Su precio puede oscilar en función de donde la adquieras, siendo más barata en sitios como Aliexpress, y un poco más cara en tiendas como Amazon. Entre los 25-40€ puedes encontrarla. Este último modelo cuenta con antena Wifi incorporada y Bluetooth, características no disponibles en modelos anteriores. Fuente de alimentación. Recomiendo la oficial, pero si no lo es, asegurate de que sea buena y que cuente con salida de 5.1V a 2.5A. Caja para Raspberry. Es opcional, las hay de distintos tipos, la oficial, transparentes, con hueco para un ventilador, con espacio para incorporar una pantalla y poder convertir tu Raspberry en una tablet, etc. Tarjeta MicroSD. Versiones anteriores de la raspberry funcionan con una tarjeta SD, pero el último modelo ya funciona con MicroSD. Este será el disco duro, recomendable un adaptador de MicroSD a SD para introducirla en el ordenador y grabar la imagen del sistema operativo. A tener en cuenta, la capacidad, yo recomendaría 16 GB mínimo y de clase 10, cuanto mejor sea la velocidad de escritura, mejor será el rendimiento de nuestro mini ordenador. Cable HDMI, para conectarla a la televisión o cualquier monitor. Será necesario para el primer arranque, posteriormente se puede acceder por remoto o SSH.  En mi caso elegí la opción más rápida y cómoda, que es comprar un kit en Amazon con todos los componentes oficiales. Puedes ahorrar algunos euros comprando los componentes por separado.\nInstalando Raspbian Vamos a ver como instalar Raspbian en la tarjeta MicroSD en unos sencillos pasos:\n Descargamos Raspbian desde la página web oficial. Raspbian es el sistema operativo oficial y el que mayor soporte tiene. Hay una versión ligera y una full, yo me he decantado por instalar la completa. Insertamos la tarjeta MicroSD en el adaptador SD, y este último a su vez en nuestra tarjeta lectora de SD de nuestro ordenador. Abrimos el explorador y nos aseguramos de la letra que corresponde con la tarjeta. Para escribir la imagen disponemos de dos programas. El primero (el que recomiendo y he usado) es Etcher, es multiplataforma y dispone de la capacidad de grabar la imagen sin necesidad de descomprimirla. Además comprueba al finalizar que se grabó correctamente. La otra opción es Win32 Disk Imager. Simplemente seleccionamos la imagen, la unidad (asegurate de no equivocarte y elegir la de la tarjeta) y flasheamos.\r Una vez termine (tardará un rato), y compruebe que se ha grabado correctamente, ya dispondremos de la tarjeta lista para insertarla en nuestra raspberry.  Primer arranque de la Raspberry Ahora solo toca ensamblar todo el hardware antes de arrancar. Si disponemos de caja, en la parte posterior encontramos la ranura para introducir facilmente nuestra tarjeta MicroSD. Una vez insertada, hacemos uso de los puertos USB para conectar ratón y teclado, conectamos el cable HDMI de la raspberry al monitor/televisión, y por último conectamos la fuente de alimentación. Con esto se encencerá nuestra raspberry y deberíamos ver en pantalla el arranque de Raspbian.\nHasta aquí la primera parte de primeros pasos con Raspberry. En posteriores artículos describiré como configurar algunos aspectos básicos como Wifi, teclado, idioma, conectarnos remotamente, etc.\nAmplía información sobre Raspberry en su página web oficial.\n","summary":"Recientemente me he animado a adquirir el mini ordenador más famoso actualmente, la archiconocida Raspberry Pi."},{"url":"/blog/reemplazando-atributos-html-con-sublime/","title":"Reemplazando atributos HTML con Sublime","content":"Un tip rápido y fácil aplicable con Sublime o cualquier otro editor de texto que permita reemplazar con expresiones regulares. Me encontraba copiando a una entrada de Wordpess una tabla desde un fichero excel, en el cual había modificado el ancho de algunas celdas. Es una manera fácil de insertar una tabla sin necesidad de estar construyendo todo el código html.\nEl problema era que había un montón de atributos width, cada uno con un número distinto. Corregirlas a mano no es una opción cuando eres vago, y para ello las expresiones regulares acuden al rescate.\nSimplemente pulsando Ctrl + H (o en el menú Find-\u0026gt; Replace), nos aseguramos de marcar la opción de expresiones regulares, y buscamos la siguiente expresión regular.\nwidth=\u0026quot;.*?\u0026quot;\nVemos como se seleccionan todas las ocurrencias (en rojo la opción de búsqueda con expresiones regulares).\nSimplemente va a buscar todas las coincidencias en el fichero del atributo width con contenido entre comillas. Seleccionamos reemplazar por nada, y en un momento ya hemos eliminado todos los artributos width del texto. Fácil y sencillo.\n","summary":"Un tip rápido y fácil aplicable con Sublime o cualquier otro editor de texto que permita reemplazar con expresiones regulares."},{"url":"/blog/arbol-de-intervalos-interval-tree-en-javascript/","title":"Arbol de intervalos (interval tree) en Javascript","content":"Continúo aprendiendo cosas en mi proyecto laboral actual. En este caso, para optimizar el rendimiento de una búsqueda en un objeto enorme en Javascript. El problema es el siguiente, se han de encontrar los nodos que pertenecen a un intervalo dado. En este caso en concreto, se dispone de una lista de canales de televisión, para los cuales disponemos de todos los programas, relativos a varios días de programación.\nEn los navegadores de hoy en día, como Google Chrome o cualquier navegador medianamente moderno, no habría excesivos problemas en iterar por fuerza bruta hasta encontrar todos los eventos cuya fecha de inicio y fin se encontrase dentro del intervalo (ojo, para nada digo que sea lo más óptimo ni recomendado). Los problemas pueden llegar cuando en el target del proyecto podemos encontrar televisiones Smart TV´s antiguas y/o de gama baja, que vienen más justas de memoria.\nAdemás, no es un escenario normal, en mi caso los datos se encuentran en formato binario, y es necesario realizar una descodificación antes de saber si un determinado programa de un canal está dentro del rango horario buscado o no. Para ello podemos elaborar un árbol de intervalos, algo bastante sencillo de hacer en lenguajes como Java, pero más díficil en Javascript. Por suerte, siempre podemos encontrar librerías y código de terceros que ya haya resuelto este y otros algoritmos para Javascript, en este caso yo he utilizado ésta librería, interval-tree2.\nSu uso es muy sencillo, tal y como describen en su sitio de Github. En nuestro proyecto utilizamos RequireJS como cargador de módulos, asi que adapté los distintos ficheros y los convertí en módulos. Si no tienes ni idea de CoffeeScript (lenguaje que compila a Javascript), ni de como compilarlo, puedes instalarte el paquete por npm, que es lo que hice yo y de ahí cogí los ficheros js.\nnpm install interval-tree2 En la carpeta dist se encuentran los ficheros necesarios:\n interval.js interval-tree.js node.js point.js sorted-list.js util.js  Yo he cogido todos, los he modificado para usarlos en entorno web, pongo el código al final de la entrada. Siguiendo el ejemplo puesto por el autor. Para crear un árbol y añadir intervalos:\nvar itree = new IntervalTree(300); // 300 : Centro del árbol\r\r// \u0026#39;foo\u0026#39; es el identificador del intervalo\ritree.add(22, 56, \u0026#39;foo\u0026#39;);\r// \u0026#39;bar\u0026#39; es el identificador del intervalo\ritree.add(44, 199, \u0026#39;bar\u0026#39;);\r// Si no se pone id, se asigna automaticamente uno\ritree.add(1, 38);  Una vez insertados los intervalos, a la hora de buscar disponemos de 2 métodos:\n// Intervalos que coinciden con un punto\rvar intervals = itree.pointSearch(103);\r// Intervalos que entran en el rango solicitado\rvar intervals2 = itree.rangeSearch(103, 400);  Una vez obtenidos, se pueden recorrer todos los intervalos:\nintervals2.forEach(function(interval) {\rconsole.log(interval.start); // Posición de inicio\rconsole.log(interval.end); // Posición de fin\rconsole.log(interval.id); // ID\r});  Por último, se puede eliminar un intervalo dado su id:\nitree.remove(\u0026#39;foo\u0026#39;);  En mi caso, encontré especialmente útil el id de cada intervalo, pues lo usaba para obtener información de la posición dentro del binario donde poder buscar la información de cada programa. Cada canal de televisión dispone de su árbol, y cada evento tenía un id de este estilo:\ndia_deprogramacion|posicion_binario\nEjemplo: \u0026#8220;5|250\u0026#8221;\nAquí está todo el código de seguido, en formato módulos de Javascript, listo para importar y comenzar a usarse en entorno web.\nvar Node = ( function() {\r/**\r@constructor\r@param {Number} center center of the node\r*/\rfunction Node( center ) {\rthis.center = center;\r/**\ranother node whose center is less than this.center\r@property {Node} left\r*/\rthis.left = null;\r/**\ranother node whose center is greater than this.center\r@property {Node} right\r*/\rthis.right = null;\r/**\rsorted list of Intervals, sorting them by their start property\r@property {SortedList(Interval)} starts\r*/\rthis.starts = new SortedList( \u0026#39;start\u0026#39; );\r/**\rsorted list of Intervals, sorting them by their end property\r@property {SortedList(Interval)} ends\r*/\rthis.ends = new SortedList( \u0026#39;end\u0026#39; );\r}\r/**\rthe number of intervals\r@method count\r@return {Number}\r*/\rNode.prototype.count = function() {\rreturn this.starts.length;\r};\r/**\rinsert an interval\r@method insert\r@param {Interval} interval\r*/\rNode.prototype.insert = function( interval ) {\rthis.starts.insert( interval );\rreturn this.ends.insert( interval );\r};\r/**\rget intervals whose start position is less than or equal to the given value\r@method startPointSearch\r@param {Number} val\r@return {Array(Interval)}\r*/\rNode.prototype.startPointSearch = function( val ) {\rvar index;\rindex = this.starts.lastPositionOf( {\rstart: val\r} );\rreturn this.starts.slice( 0, index + 1 );\r};\r/**\rget intervals whose end position is more than or equal to the given value\r@method endPointSearch\r@param {Number} val\r@return {Array(Interval)}\r*/\rNode.prototype.endPointSearch = function( val ) {\rvar index;\rindex = this.ends.firstPositionOf( {\rend: val\r} );\rreturn this.ends.slice( index );\r};\r/**\rgets all registered interval\r@method getAllIntervals\r@return {Array(Interval)}\r*/\rNode.prototype.getAllIntervals = function() {\rreturn this.starts.toArray();\r};\r/**\rremove the given interval\r@method remove\r@param {Interval} interval\r@param {SortedList} list\r*/\rNode.prototype.remove = function( interval ) {\rthis.removeFromList( interval, this.starts );\rreturn this.removeFromList( interval, this.ends );\r};\r/**\rremove the given interval from the given list\r@method removeFromList\r@private\r@param {Interval} interval\r@param {SortedList} list\r*/\rNode.prototype.removeFromList = function( interval, list ) {\rvar candidate, firstPos, i, idx, ref, ref1, results;\rfirstPos = list.firstPositionOf( interval );\rresults = [];\rfor ( idx = i = ref = firstPos, ref1 = list.length; ref \u0026lt;= ref1 ? i \u0026lt; ref1 : i \u0026gt; ref1; idx = ref \u0026lt;= ref1 ? ++i : --i ) {\rcandidate = list[ idx ];\rif ( candidate.id === interval.id ) {\rlist.remove( idx );\rbreak;\r}\relse {\rresults.push( void 0 );\r}\r}\rreturn results;\r};\rreturn Node;\r} )();\rvar Interval;\rInterval = ( function() {\r/**\r@constructor\r@param {Number} start start of the interval\r@param {Number} end end of the interval\r@param {Number|String} id id of the interval\r*/\rfunction Interval( start, end, id ) {\rthis.start = start;\rthis.end = end;\rthis.id = id;\r}\r/**\rget center of the interval\r@method center\r@return {Number} center\r*/\rInterval.prototype.center = function() {\rreturn ( this.start + this.end ) / 2;\r};\rreturn Interval;\r} )();\rvar IntervalTree = ( function() {\r/**\r@constructor\r@param {Number} center center of the root node\r*/\rfunction IntervalTree( center ) {\rUtil.assertNumber( center, \u0026#39;IntervalTree: center\u0026#39; );\r/**\rcenter =\u0026gt; node\r@property {Object(Node)} nodesByCenter\r*/\rthis.nodesByCenter = {};\r/**\rroot node\r@property {Node} root\r*/\rthis.root = this.createNode( center );\r/**\rinterval id =\u0026gt; interval\r@property {Object(Interval)} intervalsById\r*/\rthis.intervalsById = {};\r/**\rinterval id =\u0026gt; node\r@property {Object(Node)} nodesById\r*/\rthis.nodesById = {};\r/**\rsorted list of whole point\r@property {SortedList(Point)} pointTree\r*/\rthis.pointTree = new SortedList( \u0026#39;val\u0026#39; );\r/**\runique id candidate of interval without id to be added next time\r@property {Number} idCandidate\r*/\rthis.idCandidate = 0;\r}\r/**\radd one interval\r@method add\r@public\r@param {Number} start start of the interval to create\r@param {Number} end end of the interval to create\r@param {String|Number} [id] identifier to distinguish intervals. Automatically defiend when not set.\r@return {Interval}\r*/\rIntervalTree.prototype.add = function( start, end, id ) {\rvar interval;\rif ( this.intervalsById[ id ] != null ) {\rthrow new Error( \u0026#39;id \u0026#39; + id + \u0026#39; is already registered.\u0026#39; );\r}\rif ( id == null ) {\rwhile ( this.intervalsById[ this.idCandidate ] != null ) {\rthis.idCandidate++;\r}\rid = this.idCandidate;\r}\rUtil.assertNumber( start, \u0026#39;1st argument of IntervalTree#add()\u0026#39; );\rUtil.assertNumber( end, \u0026#39;2nd argument of IntervalTree#add()\u0026#39; );\rif ( start \u0026gt;= end ) {\rUtil.assertOrder( start, end, \u0026#39;start\u0026#39;, \u0026#39;end\u0026#39; );\r}\rinterval = new Interval( start, end, id );\rthis.pointTree.insert( new Point( interval.start, id ) );\rthis.pointTree.insert( new Point( interval.end, id ) );\rthis.intervalsById[ id ] = interval;\rreturn this.insert( interval, this.root );\r};\r/**\rsearch intervals\rwhen only one argument is given, return intervals which contains the value\rwhen two arguments are given, ...\r@method search\r@public\r@param {Number} val1\r@param {Number} val2\r@return {Array(Interval)} intervals\r*/\rIntervalTree.prototype.search = function( val1, val2 ) {\rUtil.assertNumber( val1, \u0026#39;1st argument at IntervalTree#search()\u0026#39; );\rif ( val2 == null ) {\rreturn this.pointSearch( val1 );\r}\relse {\rUtil.assertNumber( val2, \u0026#39;2nd argument at IntervalTree#search()\u0026#39; );\rUtil.assertOrder( val1, val2, \u0026#39;1st argument\u0026#39;, \u0026#39;2nd argument\u0026#39;, \u0026#39;IntervalTree#search()\u0026#39; );\rreturn this.rangeSearch( val1, val2 );\r}\r};\r/**\rremoves an interval of the given id\r@method remove\r@public\r@param {Number|String} id id of the interval to remove\r*/\rIntervalTree.prototype.remove = function( id ) {\rvar interval, node;\rinterval = this.intervalsById[ id ];\rif ( interval == null ) {\rreturn;\r}\rnode = this.nodesById[ id ];\rnode.remove( interval );\rdelete this.nodesById[ id ];\rreturn delete this.intervalsById[ id ];\r};\r/**\rsearch intervals at the given node\r@method pointSearch\r@public\r@param {Number} val\r@param {Node} [node] current node to search. default is this.root\r@return {Array(Interval)}\r*/\rIntervalTree.prototype.pointSearch = function( val, node, results ) {\rif ( node == null ) {\rnode = this.root;\r}\rif ( results == null ) {\rresults = [];\r}\rUtil.assertNumber( val, \u0026#39;1st argument of IntervalTree#pointSearch()\u0026#39; );\rif ( val \u0026lt; node.center ) {\rresults = results.concat( node.startPointSearch( val ) );\rif ( node.left != null ) {\rreturn this.pointSearch( val, node.left, results );\r}\relse {\rreturn results;\r}\r}\rif ( val \u0026gt; node.center ) {\rresults = results.concat( node.endPointSearch( val ) );\rif ( node.right != null ) {\rreturn this.pointSearch( val, node.right, results );\r}\relse {\rreturn results;\r}\r}\rreturn results.concat( node.getAllIntervals() );\r};\r/**\rreturns intervals which covers the given start-end interval\r@method rangeSearch\r@public\r@param {Number} start start of the interval\r@param {Number} end end of the interval\r@return {Array(Interval)}\r*/\rIntervalTree.prototype.rangeSearch = function( start, end ) {\rvar firstPos, i, id, interval, j, lastPos, len, len1, point, ref, ref1, resultsById;\rUtil.assertNumber( start, \u0026#39;1st argument at IntervalTree#rangeSearch()\u0026#39; );\rUtil.assertNumber( end, \u0026#39;2nd argument at IntervalTree#rangeSearch()\u0026#39; );\rUtil.assertOrder( start, end, \u0026#39;1st argument\u0026#39;, \u0026#39;2nd argument\u0026#39;, \u0026#39;IntervalTree#rangeSearch()\u0026#39; );\rresultsById = {};\rref = this.pointSearch( start );\rfor ( i = 0, len = ref.length; i \u0026lt; len; i++ ) {\rinterval = ref[ i ];\rresultsById[ interval.id ] = interval;\r}\rfirstPos = this.pointTree.firstPositionOf( new Point( start ) );\rlastPos = this.pointTree.lastPositionOf( new Point( end ) );\rref1 = this.pointTree.slice( firstPos, lastPos + 1 );\rfor ( j = 0, len1 = ref1.length; j \u0026lt; len1; j++ ) {\rpoint = ref1[ j ];\rresultsById[ point.id ] = this.intervalsById[ point.id ];\r}\rreturn ( function() {\rvar results1;\rresults1 = [];\rfor ( id in resultsById ) {\rinterval = resultsById[ id ];\rresults1.push( interval );\r}\rreturn results1;\r} )();\r};\r/**\rinsert interval to the given node\r@method insert\r@private\r@param {Interval} interval\r@param {Node} node node to insert the interval\r@return {Interval} inserted interval\r*/\rIntervalTree.prototype.insert = function( interval, node ) {\rif ( interval.end \u0026lt; node.center ) {\rif ( node.left == null ) {\rnode.left = this.createNode( interval.end );\r}\rreturn this.insert( interval, node.left );\r}\rif ( node.center \u0026lt; interval.start ) {\rif ( node.right == null ) {\rnode.right = this.createNode( interval.start );\r}\rreturn this.insert( interval, node.right );\r}\rnode.insert( interval );\rthis.nodesById[ interval.id ] = node;\rreturn interval;\r};\r/**\rcreate node by center\r@method createNode\r@private\r@param {Number} center\r@return {Node} node\r*/\rIntervalTree.prototype.createNode = function( center ) {\rvar node;\rnode = new Node( center );\rthis.nodesByCenter[ center ] = node;\rreturn node;\r};\rreturn IntervalTree;\r} )();\rvar Util;\rUtil = ( function() {\rfunction Util() {}\rUtil.assertNumber = function( val, desc ) {\rif ( val == null ) {\rthrow new Error( desc + \u0026#39; is required.\u0026#39; );\r}\rif ( typeof val !== \u0026#39;number\u0026#39; ) {\rthrow new Error( desc + \u0026#39; must be a number.\u0026#39; );\r}\r};\rUtil.assertOrder = function( start, end, startName, endName, desc ) {\rif ( start \u0026gt;= end ) {\rthrow new Error( desc + \u0026#34;: \u0026#34; + startName + \u0026#34;(\u0026#34; + start + \u0026#34;) must be smaller than \u0026#34; + endName + \u0026#34;(\u0026#34; + end + \u0026#34;).\u0026#34; );\r}\r};\rreturn Util;\r} )();\r/**\rextended array of objects, always sorted\r@class SortedList\r@extends Array\r@module interval-tree2\r*/\rvar SortedList,\rextend = function( child, parent ) {\rfor ( var key in parent ) {\rif ( hasProp.call( parent, key ) ) child[ key ] = parent[ key ];\r}\rfunction ctor() {\rthis.constructor = child;\r}\rctor.prototype = parent.prototype;\rchild.prototype = new ctor();\rchild.__super__ = parent.prototype;\rreturn child;\r},\rhasProp = {}.hasOwnProperty;\rSortedList = ( function( superClass ) {\rextend( SortedList, superClass );\r/**\r@constructor\r@param {String} compareKey key name to compare objects. The value of the key must be a number.\r*/\r/**\rkey name to compare objects. The value of the key must be a number.\r@property {String} compareKey\r*/\rfunction SortedList( compareKey ) {\rthis.compareKey = compareKey;\r}\r/**\rinsert a value\r@method insert\r@param {any} val\r@return {Number} inserted position\r*/\rSortedList.prototype.insert = function( val ) {\rvar pos;\rpos = this.bsearch( val );\rthis.splice( pos + 1, 0, val );\rreturn pos + 1;\r};\r/**\rremove the value in the given position\r@method remove\r@param {Number} pos position\r@return {SortedList} self\r*/\rSortedList.prototype.remove = function( pos ) {\rthis.splice( pos, 1 );\rreturn this;\r};\r/**\rget maximum value in the list\r@method max\r@return {Number}\r*/\rSortedList.prototype.max = function() {\rvar ref;\rreturn ( ref = this[ this.length - 1 ] ) != null ? ref[ this.compareKey ] : void 0;\r};\r/**\rget minimum value in the list\r@method min\r@return {Number}\r*/\rSortedList.prototype.min = function() {\rvar ref;\rreturn ( ref = this[ 0 ] ) != null ? ref[ this.compareKey ] : void 0;\r};\r/**\rbinary search\r@method bsearch\r@param {any} val\r@return {Number} position of the value\r*/\rSortedList.prototype.bsearch = function( val ) {\rvar comp, epos, mpos, mval, spos;\rif ( !this.length ) {\rreturn -1;\r}\rmpos = null;\rmval = null;\rspos = 0;\repos = this.length;\rwhile ( epos - spos \u0026gt; 1 ) {\rmpos = Math.floor( ( spos + epos ) / 2 );\rmval = this[ mpos ];\rcomp = this.compare( val, mval );\rif ( comp === 0 ) {\rreturn mpos;\r}\rif ( comp \u0026gt; 0 ) {\rspos = mpos;\r}\relse {\repos = mpos;\r}\r}\rif ( spos === 0 \u0026amp;\u0026amp; this.compare( this[ 0 ], val ) \u0026gt; 0 ) {\rreturn -1;\r}\relse {\rreturn spos;\r}\r};\r/**\rleftmost position of the given val\r@method firstPositionOf\r@param {any} val\r@return {Number} leftmost position of the value\r*/\rSortedList.prototype.firstPositionOf = function( val ) {\rvar index, num, ref;\rindex = this.bsearch( val );\rif ( index === -1 ) {\rreturn -1;\r}\rnum = val[ this.compareKey ];\rif ( num === ( ( ref = this[ index ] ) != null ? ref[ this.compareKey ] : void 0 ) ) {\rwhile ( true ) {\rif ( index \u0026lt;= 0 ) {\rbreak;\r}\rif ( this[ index - 1 ][ this.compareKey ] \u0026lt; num ) {\rbreak;\r}\rindex--;\r}\r}\relse {\rindex++;\r}\rreturn index;\r};\r/**\rrightmost position of the given val\r@method lastPositionOf\r@param {any} val\r@return {Number} rightmost position of the value\r*/\rSortedList.prototype.lastPositionOf = function( val ) {\rvar index, num;\rindex = this.bsearch( val );\rif ( index === -1 ) {\rreturn -1;\r}\rnum = val[ this.compareKey ];\rif ( index === this.length - 1 \u0026amp;\u0026amp; num \u0026gt; this.max() ) {\rreturn index + 1;\r}\rwhile ( true ) {\rif ( index + 1 \u0026gt;= this.length ) {\rbreak;\r}\rif ( this[ index + 1 ][ this.compareKey ] \u0026gt; num ) {\rbreak;\r}\rindex++;\r}\rreturn index;\r};\r/**\r* sorted.toArray()\r* get raw array\r*\r*/\rSortedList.prototype.toArray = function() {\rreturn this.slice();\r};\r/**\rcomparison function. Compares two objects by this.compareKey\r@method compare\r@private\r@param {any} a\r@param {any} b\r*/\rSortedList.prototype.compare = function( a, b ) {\rvar c;\rif ( a == null ) {\rreturn -1;\r}\rif ( b == null ) {\rreturn 1;\r}\rc = a[ this.compareKey ] - b[ this.compareKey ];\rif ( c \u0026gt; 0 ) {\rreturn 1;\r}\relse if ( c === 0 ) {\rreturn 0;\r}\relse {\rreturn -1;\r}\r};\rreturn SortedList;\r} )( Array );\rvar Point;\rPoint = ( function() {\r/**\r@constructor\r@param {Number} val number\r@param {Number|String} id id\r*/\rfunction Point( val, id ) {\rthis.val = val;\rthis.id = id;\r}\rreturn Point;\r} )();  \u0026nbsp;\n","summary":"Continúo aprendiendo cosas en mi proyecto laboral actual. En este caso, para optimizar el rendimiento de una búsqueda en un objeto enorme en Javascript."},{"url":"/blog/suscribirse-de-manera-segura-a-eventos-con-jquery/","title":"Suscribirse de manera segura a eventos con jQuery","content":"Un truco del que me acabo de enterar, que seguro será de gran utilidad a la hora de desarrollar aplicaciones con Javascript. Sobre todo aplicaciones SPA (Single Page Application). A la hora de suscribirnos a eventos de manera global en nuestras ventanas, escenas, vistas (hay multitud de forma de llamarlas según el framework o el entorno en que trabajes) es algo muy normal suscribirnos a eventos en window.\nUn ejemplo sería el evento resize.\n$( window ).on( \u0026#34;resize\u0026#34;, _handleResize );  Muy simple, nos suscribimos al evento resize del navegador para que se ejecute la función _handleResize cada vez que se produce un redimensionado del navegador. Al salir de nuestra vista, para ahorrar en consumo de memoria, es altamente recomendable eliminar todos los listeners que hayamos creado, si no van a ser necesarios, y crearlos nuevamente cuando vayamos a necesitarlos. La duda es, ¿Cómo eliminar nuestra llamada unicamente sin afectar al resto?\n$( window ).off( \u0026#34;resize\u0026#34; );  Si hacemos el off directamente, eliminaríamos todos los callbacks asociados al evento resize, algo que probablemente no es lo que buscamos. Para solucionar este problema, podemos hacer uso de namespaces que nos permitan suscribirnos y desuscribirnos al evento resize dado un namespace. Para ello simplemente escribiremos resize.nombreNameSpace. Así creamos el listener:\n$( window ).on( \u0026#34;resize.config\u0026#34;, _handleResize );  Y de la misma forma, aplicamos el off.\n$( window ).off( \u0026#34;resize.config\u0026#34; );  El mismo truco funciona para otros eventos como keydown. Asi que si no conocías esta valiosa información de jQuery, ya puedes comenzar a utilizarla para evitar \u0026#8220;desuscribir\u0026#8221; más de la cuenta.\n","summary":"Un truco del que me acabo de enterar, que seguro será de gran utilidad a la hora de desarrollar aplicaciones con Javascript."},{"url":"/blog/obtener-el-valor-de-una-propiedad-css-en-porcentaje/","title":"Obtener el valor de una propiedad CSS en porcentaje","content":"Un tip rápido, trabajando con jQuery no es posible obtener de un nodo por ejemplo, el valor del ancho en porcentaje. Lo primero y más lógico que se nos ocurre sería invocar al método css y pedirle el width (equivalente sería a otras propiedades como top, left, height, etc):\nvar $element = $(\u0026#34;\u0026lt;div id=\u0026#39;nodo\u0026#39; style=\u0026#39;width: 50%\u0026#39;\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;);\r$(\u0026#34;body\u0026#34;).append( $element );\rconsole.log( $(\u0026#34;#nodo\u0026#34;).css(\u0026#34;width\u0026#34;) ); // 683px  Si quisieramos obtener el valor en porcentaje, habría que hacerlo de otra manera, directamente sin jQuery. Los selectores de jQuery devuelven un array con los elementos del DOM, asi que si tomamos la posición 0 tendremos el elemento del DOM (no la instancia jQuery) y podremos acceder directamente a la clave style:\nvar $element = $(\u0026#34;\u0026lt;div id=\u0026#39;nodo\u0026#39; style=\u0026#39;width: 50%\u0026#39;\u0026gt;\u0026lt;/div\u0026gt;\u0026#34;);\r$(\u0026#34;body\u0026#34;).append( $element );\rconsole.log( $(\u0026#34;#nodo\u0026#34;)[0].style.width ); // 50%  ","summary":"Un tip rápido, trabajando con jQuery no es posible obtener de un nodo por ejemplo, el valor del ancho en porcentaje."},{"url":"/blog/wordpress-no-carga-despu%C3%A9s-de-actualizar/","title":"WordPress no carga después de actualizar","content":"Después de meses sin publicar ni tan siquiera una entrada, me dirigí a abrir el blog para escribir algo, realizar actualizaciones, plugins, temas, traducciones\u0026#8230; Tenía la versión de WordPress desactualizada, el propio WordPress te avisa que antes de actualizar realices un respaldo de la base de datos.\nLe dí a actualizar sin más, y de repente el blog comenzó a dar error 500, no cargaba. Comienza el pánico, a pesar de que tengo varios backups hechos del blog, tanto de manera manual desde el panel de administración del hosting, como con un plugin que os animo y recomiendo a probar, Updraftplus, que realiza backups y los envío a alojamientos externos como Dropbox o Google Drive. La versión básica cumple perfectamente mis expectativas, pero para parámetros avanzados y mayores ventajas disponen de una versión premium. Nunca está de más tener distintos backups.\nOs cuento como he resuelto el problema, por si os lo encontráis alguna vez:\n En primer lugar, intenté ejecutar de nuevo el script encargado de lanzar la actualización, /wp-admin/upgrade.php. En mi caso me apareció el mensaje de que ya estaba actualizado. Como segunda opción, pensé que podía ser el tema que estoy usando. Fui vía FTP a la carpeta /wp-content/themes, y renombré el directorio del theme que estoy usando añadiendo .old al final (hemingway a hemingway.old), y renombré la carpeta de uno de los themes por defecto de WordPress, (se puede probar con uno o con todos, twentytwelve, twentythirteen, twentyfourteen, twentyfifteen) con el nombre del theme que estaba activado (twentytwelve a hemingway). Seguía fallando asi que pensé que podía tratarse de un plugin desactualizado, antes de pensar en restaurar el último backup o seguir buscando. Finalmente desactivé los plugins, para ello fuí a la carpeta wp-content/plugins, y la renombré a plugins.old. Luego puse en la barra de direcciones del navegador la url de plugins, /wp-admin/plugins.php, al detectar que no había plugins (pues estaba renombrada la carpeta), WordPress por defecto desactiva todos. Me salió el mensaje de que no se habían encontrado plugins para mi sitio, un alivio pues ya veía el panel de administración, y si navegaba a la página principal ya me salía.  En mi caso creo que el causante era el plugin Crayon Syntax Highlighter, que utilizo para que el código que publico aparezca con sintáxis coloreada. Como ya tenía acotado el problema, actualicé todos los plugins, los fuí activando y ya funcionaba todo correctamente. Si alguna vez os ocurre, probad esta pequeña guía, es un comienzo antes de volveros locos buscando soluciones vía Google.\n","summary":"Después de meses sin publicar ni tan siquiera una entrada, me dirigí a abrir el blog para escribir algo, realizar actualizaciones, plugins, temas, traducciones&#8230; Tenía la versión de WordPress desactualizada, el propio WordPress te avisa que antes de actualizar realices un respaldo de la base de datos."},{"url":"/blog/evitar-que-jquery-sea-global-con-requirejs/","title":"Evitar que jQuery sea global con RequireJS","content":"El popular framework de Javascript jQuery, es utilizado ampliamente en el mundo del desarrollo web. Por defecto se instancia en la variable global $, además de jQuery. Esto puede entrar en conflicto con otras librerías que hayan decidido utilizar el $ también. Si estás utilizando el popular cargador de módulos RequireJS, hay una manera muy fácil para evitar que jQuery se instancie globalmente.\nPor ejemplo, desarrollando para las televisiones SmartTV de Samsung, me encontré con ese problema, ya que Samsung incluye internamente su propia versión de jQuery, sobreescribiendo la que añadas. De manera que haciendo uso del método noConflict de jQuery, junto con la opción map de RequireJS, podemos hacer que se guarde la referencia a jQuery, y que solo tengan acceso a ella los módulos que declaren nuestra versión de jQuery como dependencia.\nVeamos como quedaría nuestra configuración de RequireJS:\nrequire.config( {\rbaseUrl: \u0026#34;./\u0026#34;,\rpaths: {\r\u0026#34;jquery\u0026#34;: \u0026#34;lib/jquery-1.11.2.min\u0026#34;,\r\u0026#34;noConflict\u0026#34;: \u0026#34;lib/no-conflict\u0026#34;,\r},\rmap: {\r\u0026#34;*\u0026#34;: {\r\u0026#34;jquery\u0026#34;: \u0026#34;noConflict\u0026#34;\r},\r\u0026#34;noConflict\u0026#34;: {\r\u0026#34;jquery\u0026#34;: \u0026#34;jquery\u0026#34;\r}\r}\r} );  Y luego simplemente añadiríamos el siguiente código en el módulo noConflict:\ndefine( [ \u0026#34;jquery\u0026#34; ], function( $ ) {\rreturn $.noConflict( true );\r} );  Pasándole true al método noConflict de jQuery, además de eliminar jQuery de la variable global $, se elimina además de la global jQuery. De esta manera, podríamos tener varias versiones de jQuery de manera privada, o una pública y otra solo usada como dependencia en los módulos que se necesite.\nPara usarlo, se require jQuery como una dependencia, y se le asigna a la variable que solo estará disponible en ese módulo el nombre que queramos:\ndefine(\r// Módulos requeridos\r [ \u0026#34;jquery\u0026#34;, ],\rfunction( jQueryPrivado ) {\r}\r);  Si aún no conoces RequireJS, o no utilizas un cargador de módulos en tus desarrollos Javascript, te recomiendo que aprendas, ya que ayuda a mantener separadas las distintas funcionalidades de una aplicación, evitando crear un monstruo que a la larga sea difícil de mantener.\n","summary":"El popular framework de Javascript jQuery, es utilizado ampliamente en el mundo del desarrollo web."},{"url":"/blog/n%C3%BAmero-de-commits-en-git-por-usuario/","title":"Número de commits en Git por usuario","content":"Para saber el número de commits realizados por usuario en un repositorio Git, simplemente en el terminal:\ngit shortlog -s -n ","summary":"Para saber el número de commits realizados por usuario en un repositorio Git, simplemente en el terminal:"},{"url":"/blog/compilando-ficheros-sass-con-grunt/","title":"Compilando ficheros Sass con grunt","content":"\rA lo largo de los 2 últimos años, he ido poco a poco mejorando mi nivel de productividad en el trabajo. Primero cambié mi editor de toda la vida, Notepad++ por Sublime Text. Y posteriormente, he ido añadiendo diferentes herramientas que proporciona Node.js, para automatizar distintos procesos y tareas, como ejecución de tests, linters de código, minimizado de Javascript y CSS, etc\u0026#8230;\nPara automatizar más aún todos estos procesos, está Grunt, que dispone de plugins fáciles de integrar en nuestros proyectos, para realizar todo tipo de tareas que precisemos en nuestro proyecto. En mi proyecto actual, surgió una necesidad a un compañero de proyecto, que se encarga de la maquetación de la aplicación que estamos desarrollando.\nPara ello está utilizando Sass, uno de los preprocesadores CSS más populares actualmente. Por motivos de simplicidad de código y maximizar la compatibilidad con navegadores no muy modernos (mantenemos soporte a navegadores webKit antiguos, que usan algunas Smart TV anteriores a 2013), a la hora de hacer los elementos reutilizables de la aplicación con Javascript, decidimos que en lugar de que cada widget cargue su hoja de estilos, tener todo el CSS de todos los widgets unificados en un mismo fichero que esté cargado desde el principio (controlar cuando se ha cargado una hoja de estilos, de manera simple y compatible con todos los navegadores es una tarea que ni RequireJS ha incluido en su cargador de módulos).\nGrunt y sus plugins son instalados y gestionados a través de NPM, el gestor de paquetes por consola para Node.js. Asi que si no lo tienes ya, el primer paso es instalar Node.js. Acto seguido, nos dirigiremos a la consola, e instalaramos Grunt globalmente (seguramente necesites sudo en Linux):\nnpm install -g grunt-cli Ya podemos ir a la carpeta donde está nuestro proyecto (cd ruta/proyecto/). Deberemos tener nuestro fichero package.json creado, con el nombre del proyecto, descripción y otros datos importantes. Si no lo tienes creado, desde consola, estando en el directorio raíz del proyecto, puedes ejecutar npm init, y se irán pidiendo datos para crear el fichero, o puedes crearlo directamente con tu editor de texto, con esto bastaría a priori:\n{\r\u0026#34;name\u0026#34;: \u0026#34;Nombre del proyecto\u0026#34;,\r\u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;\r}  Una vez hecho esto, ya podemos proceder a instalar grunt de manera local en nuestro proyecto. Simplemente iremos a la carpeta de nuestro proyecto, y en ella ejecutaremos el siguiente comando:\nnpm install grunt --save-dev Observaremos que se instala correctamente, y veremos que en el fichero package.json aparece una nueva clave llamada devDependencies, y aparece grunt:\n{\r\u0026#34;name\u0026#34;: \u0026#34;Nombre del proyecto\u0026#34;,\r\u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;,\r\u0026#34;devDependencies\u0026#34;: {\r\u0026#34;grunt\u0026#34;: \u0026#34;^0.4.5\u0026#34;\r}\r}  Además, en la raíz, está la carpeta node_modules, donde se irán instalando todos los módulos que tenemos como dependencias para nuestro proyecto. Esto facilita que si nos llevamos el proyecto a otro ordenador, o se lo enviamos a alguien, simplemente situándonos en consola en la raíz del proyecto, podremos ejecutar npm e inmediatamente se instalarán todas las dependencias necesarias para el proyecto. ¿Interesante no?\nUna vez aclarado como instalar grunt, y como funcionan de manera básica las dependencias, procederemos a instalar dos plugins para grunt, grunt-contrib-sass, para compilar Sass y grunt-contrib-watch, que nos permite tener una tarea activa, vigilando que determinados ficheros (en este caso los que tienen extensión .scss) cambien, para, en ese momento, ejecutar una determinada tarea. Ejecutamos, sin importar el orden estos comandos para instalar las nuevas dependencias:\nnpm install grunt-contrib-sass --save-dev\rnpm install grunt-contrib-watch --save-dev Ya está todo listo, ahora solo tenemos que crear nuestras tareas grunt. Para ello, en el raíz del proyecto, junto al fichero package.json, crearemos un fichero llamado gruntfile.js, donde definiremos la configuración de las distintas tareas, luego cargaremos los paquetes a usar en las tareas y por último registraremos las tareas. Para nuestro propósito, el fichero quedaría así:\n// Función contenedora\rmodule.exports = function( grunt ) {\r// Configuración de las tareas\r grunt.initConfig( {\r/*\r* Se observan dentro de la carpeta source,\r* todos los ficheros con extensión scss.\r* Cuando se produzca un cambio en alguno de\r* ellos se ejecutará la tarea sass, definida\r* más abajo.\r*/\rwatch: {\rscripts: {\rfiles: \u0026#39;source/**/*.scss\u0026#39;,\rtasks: [ \u0026#39;sass\u0026#39; ],\roptions: {\rinterrupt: true,\r/*\r* Importante la opción spawn a false,\r* para permitir cambiar el contexto de\r* la tarea.\r*/\rspawn: false\r},\r},\r},\r/*\r* Dentro de la tarea sass, tenemos dos subtareas:\r* - dist: compila el fichero main.scss siempre\r* que se produza un cambio en cualquier scss. El\r* fichero main.scss, contiene imports del resto de\r* ficheros, cada vez que se toca alguno debe de\r* actualizarse este.\r* * - changed: Tal cual está definida, compilaría todos\r* los ficheros del proyecto, pero posteriormente con\r* un evento vamos a modificar el parámetro files, y\r* es indiferente lo que contenga inicialmente.\r*/\rsass: {\rdist: {\rfiles: {\r\u0026#39;source/styles/main.css\u0026#39;: \u0026#39;source/styles/main.scss\u0026#39;\r},\roptions: {\rnoCache: true\r}\r},\rchanged: {\rfiles: [ {\rsrc: [ \u0026#39;source/**/*.scss\u0026#39; ],\rext: \u0026#39;.css\u0026#39;\r} ],\roptions: {\rnoCache: true\r}\r}\r}\r} );\r/*\r* A continuación, podemos escuchar el evento watch, que recibe\r* información acerca del fichero que ha sido modificado.\r*/\rgrunt.event.on( \u0026#39;watch\u0026#39;, function( action, filepath, target ) {\r// Reemplazamos .scss por .css, para indicar el destino\r var _destiny = filepath.replace( \u0026#34;.scss\u0026#34;, \u0026#34;.css\u0026#34; ),\r_file = {};\r/*\r* Creamos un pobjeto, para sobreescribir el parámetro file de\r* la subtarea changed.\r*/\r_file[ _destiny ] = filepath;\rgrunt.log.writeln( \u0026#39;Compilando Sass del fichero cambiado: \u0026#39; + filepath );\r/*\r* Sobreescribimos el parámetro de configuración, para que solo\r* se compile el fichero modificado.\r*/\rgrunt.config( \u0026#39;sass.changed.files\u0026#39;, _file );\r} );\r// Cargamos los plugins grunts necesarios\r grunt.loadNpmTasks( \u0026#39;grunt-contrib-watch\u0026#39; );\rgrunt.loadNpmTasks( \u0026#39;grunt-contrib-sass\u0026#39; );\r/*\r* Registramos como tarea por defecto la tarea watch. Cuando en la\r* consola, estando en el proyecto, pongamos grunt, por defecto se\r* lanzará la tarea que registremos como default. Podríamos registrar\r* otra, en cuyo caso tendríamos que poner el comando grunt watch,\r* para decirle a grunt que ejecuta la tarea watch.\r*/\rgrunt.registerTask( \u0026#39;default\u0026#39;, [ \u0026#39;watch\u0026#39; ] );\r};  Ya simplemento hemos de dirigirnos a la consola, y ejecutar grunt, ya que la tarea watch ha sido añadida por defecto, o bien grunt watch y se lanzará el proceso que estará observando los cambios producidos en los ficheros scss de nuestro proyecto, para acto seguido lanzar la tarea.\nDe esta manera nuestros ficheros Sass son compilados automaticamente, muy útil si nuestro editor de texto no dispone de un plugin que automatice el proceso y queremos evitar tener que estar compilando manualmente desde la consola.\n Primeros pasos con grunt Configurando tareas  ","summary":"A lo largo de los 2 últimos años, he ido poco a poco mejorando mi nivel de productividad en el trabajo."},{"url":"/blog/ellipsis-de-m%C3%BAltiples-l%C3%ADneas-con-javascript/","title":"Ellipsis de múltiples líneas con Javascript","content":"Ellipsis es simplemente un cáracter compuesto por tres puntos: \u0026#8220;…\u0026#8221;. En desarrollo web, se aplica a textos muy largos que son más grandes que su contenedor, y por tanto queremos que sean recortados agregando al final el carácter ellipsis. Con el avance de los estándares css modernos, ya podemos aplicar una solución sin necesidad de echar mano de Javascript:\n.ellipsis {\rwhite-space: nowrap;\roverflow: hidden;\rtext-overflow: ellipsis;\r-o-text-overflow: ellipsis;\r} ¿Cual es la limitación? Que sólo funciona en textos con una línea, si tenemos más de una línea no funciona, y es ahí donde entra en juego Javascript. He creado una sencilla función, simplemente es necesario que en css el elemento disponga de un line-height definido para funcionar.\n/**\r* Acorta strings multilinea añadiendo el símbolo ellipsis.\r* @param {jQuery} $obj : Objeto jQuery a aplicar si es necesario.\r* Importante, debe tener line-height definido.\r* @param {String} val : Texto a insertar.\r* @param {Number} maxLines : Máximo de líneas permitidas.\r*/\rfunction ellipsis( $obj, val, maxLines ) {\rif ( maxLines \u0026amp;lt; 2 ) {\r$obj.text( val );\rreturn;\r}\rvar _valueAux = val,\r_lenValueAux = _valueAux.length,\r_heightLine = parseFloat( $obj.css( \u0026#34;line-height\u0026#34; ) ),\r/*\r* Añadimos 2 porque algunos navegadores redondean line-height,\r* asi que cubrimos el máximo valor en px de line-height redondeado.\r*/\r_maxHeight = maxLines * _heightLine + 2;\r$obj.text( _valueAux );\r// Si hay más líneas de las esperadas\r if ( ( $obj[ \u0026#34;0\u0026#34; ].scrollHeight \u0026gt; _maxHeight ) \u0026amp;\u0026amp; ( _lenValueAux ) ) {\r// Reducimos el length del string hasta que queden las líneas deseadas\r while ( $obj[ \u0026#34;0\u0026#34; ].scrollHeight \u0026gt; _maxHeight ) {\r_valueAux = _valueAux.substr( 0, ( _lenValueAux - 2 ) ) + \u0026#34;…\u0026#34;;\r$obj.text( _valueAux );\r_lenValueAux = _valueAux.length;\r}\r}\r}  También hay plugins en jQuery, para un uso más avanzado y complejo no está de más echarle un ojo. Para más información, o una implementación más optimizada, hay un hilo en Stackoverflow donde hablan del tema.\n","summary":"Ellipsis es simplemente un cáracter compuesto por tres puntos: &#8220;…&#8221;. En desarrollo web, se aplica a textos muy largos que son más grandes que su contenedor, y por tanto queremos que sean recortados agregando al final el carácter ellipsis."},{"url":"/blog/jshint-y-formateo-de-c%C3%B3digo-al-hacer-commit-con-git-git-hooks/","title":"JSHint y formateo de código al hacer commit con git (Git hooks)","content":"A la hora de trabajar en equipo, tener una guía de estilos definida es de vital importancia. Estoy trabajando en un proyecto en el cual por diversos motivos que no vienen al caso, se podría mejorar bastante en ese aspecto, y mediante el uso de Node.js disponemos de herramientas que nos pueden ayudar a tener en un equipo un código más uniforme y estandar.\nPara nuestro proyecto he elegido un linter, en este caso JSHint, y un formateador para el código Javascript, que representa el grueso de los desarrollos de nuestra aplicación, js-beautify. Podría incorporarse además una tercera herramienta, muy potente a la hora de definir exactamente los estilos que deseamos aplicar de manera muy minuciosa, JSCS, que se ocupa de muchas opciones de estilo que actualmente mantiene JSHint, pero que pronto pasarán a estar deprecadas. (Actualización: Parece que ESLint es una alternativa equilibrada a JSHint y JSCS, tengo que probarlo más a fondo). Por el momento me limitaré a las 2 mencionadas.\nComo control de versiones, utilizamos Git, y aunque la consola es muy completa, en el día a día para según que tareas, es mucho mejor a la hora de seguir un historial de commits, ver cambios y hacer mergeos una herramienta gráfica como SourceTree, que es la que uso y recomiendo.\nPara estandarizar nuestro código, he decidido crear una serie de reglas a la hora de validar el código Javascript, y una vez validado, el archivo deberá ser formateado de acuerdo a otra serie de reglas, de manera que en el repositorio siempre dispongamos de archivos libres de errores, con un mismo formato y siguiendo el mismo estilo.\nLa idea es simple, quiero que cada vez que alguien vaya a hacer commit de sus cambios al repositorio, se validen los ficheros Javascript de acuerdo a unas reglas comunes de JSHint, y si el archivo no contiene errores será formateado automáticamente antes del commit al repositorio. La idea es hacerlo automático, así nadie tiene ninguna excusa. Veamos primero como instalar a nivel de proyecto las 2 herramientas.\nEn primer lugar vamos a instalar JSHint. Podemos instalarlo a nivel global, o a nivel de proyecto, me quedaré con esta última opción, de esa manera podemos disponer en cada proyecto de una configuración especifica de JSHint con las reglas que deseemos aplicar a cada proyecto. Iremos a la consola, y estando en el directorio raíz de nuestro proyecto, ejecutaremos el siguiente comando:\nnpm install --save-dev jshint Se creará un directorio llamado node_modules donde se instalará JSHint para nuestro proyecto específico. A la hora de definir las reglas para el proyecto, lo mejor será tener un fichero .jshintrc, que contenga todas las reglas y esté también en el repositorio, para que si se modifica alguna cosa, todos se actualicen al hacer pull. Hay muchas opciones, están todas explicadas en la documentación oficial, pongo como ejemplo el archivo que he creado para nuestro proyecto:\n{\r\u0026#34;evil\u0026#34; : true,\r\u0026#34;regexdash\u0026#34; : true,\r\u0026#34;browser\u0026#34; : true,\r\u0026#34;wsh\u0026#34; : true,\r\u0026#34;trailing\u0026#34; : true,\r\u0026#34;multistr\u0026#34; : true,\r\u0026#34;sub\u0026#34; : true,\r\u0026#34;loopfunc\u0026#34; : true, \u0026#34;expr\u0026#34; : true, \u0026#34;jquery\u0026#34; : true, \u0026#34;newcap\u0026#34; : true, \u0026#34;plusplus\u0026#34; : false,\r\u0026#34;curly\u0026#34; : true, \u0026#34;eqeqeq\u0026#34; : true, \u0026#34;undef\u0026#34; : true,\r\u0026#34;eqnull\u0026#34; : true,\r\u0026#34;globals\u0026#34; : {\r\u0026#34;jQuery\u0026#34;: true,\r\u0026#34;console\u0026#34;: true\r}\r}  A continuación instalaremos js-beautify, también localmente en el proyecto, desde la consola en la raíz del proyecto:\nnpm install --save-dev js-beautify Igual que en el caso anterior, crearemos un fichero .beautifyrc con las opciones que queremos que se utilicen a nivel de proyecto para formatear los ficheros javascript. Este es el nuestro:\n{\r\u0026#34;indent_size\u0026#34;: 4,\r\u0026#34;indent_char\u0026#34;: \u0026#34; \u0026#34;,\r\u0026#34;indent_level\u0026#34;: 0,\r\u0026#34;indent_with_tabs\u0026#34;: false,\r\u0026#34;preserve_newlines\u0026#34;: true,\r\u0026#34;max_preserve_newlines\u0026#34;: 10,\r\u0026#34;jslint_happy\u0026#34;: false,\r\u0026#34;space_after_anon_function\u0026#34;: false,\r\u0026#34;brace_style\u0026#34;: \u0026#34;end-expand\u0026#34;,\r\u0026#34;keep_array_indentation\u0026#34;: false,\r\u0026#34;keep_function_indentation\u0026#34;: true,\r\u0026#34;space_before_conditional\u0026#34;: true,\r\u0026#34;break_chained_methods\u0026#34;: false,\r\u0026#34;eval_code\u0026#34;: false,\r\u0026#34;unescape_strings\u0026#34;: false,\r\u0026#34;wrap_line_length\u0026#34;: 0,\r\u0026#34;wrap_attributes\u0026#34;: \u0026#34;auto\u0026#34;,\r\u0026#34;wrap_attributes_indent_size\u0026#34;: 4,\r\u0026#34;end_with_newline\u0026#34;: true\r}  Puedes consultar el listado de opciones para añadir/modificar según tus preferencias. Ya está todo listo, ahora simplemente hemos de hacer que automáticamente al hacer commit, se pase el JSHint a todos los ficheros javascript automáticamente, y si detecta algún error en alguno de los archivos, no será posible hacer commit, ya que git dará error hasta que no se solucionen. ¿Cómo puede automatizarse este proceso?\nA través de lo que se llaman hooks, que no son más que scripts que lanza git automáticamente cuando determinadas acciones ocurren. Puedes ir al directorio .git de tu proyecto, y allí encontrarás una carpeta hooks en la que hay scripts de ejemplo con la extensión .sample. El que nos interesa para este ejemplo, es el script ejecutado antes de hacer commit, que realizará tareas en el momento que hagamos commit. Para ello simplemente crearemos un archivo llamado pre-commit, sin extensión, o bien editaremos el archivo pre-commit.sample y modificaremos su nombre. El script que he creado en cuestión es el siguiente:\n#!/bin/sh\r\r# Solo queremos validar y formatear los ficheros Javascript incluidos en el commit\rfiles=$(git diff --cached --name-only --diff-filter=ACM | grep \u0026#34;.js$\u0026#34;)\r# Si no hay ficheros Javascript se continúa normalmente el commit\rif [ \u0026#34;$files\u0026#34; = \u0026#34;\u0026#34; ]; then exit 0 fi\r# Variable que comprueba si todas las validaciones fueron correctas\rpass=true\recho \u0026#34;Validando Javascript con JSHint:\u0026#34;\r# Recorremos todos los archivos\rfor file in $files; do\rexcluded=false\r# Recorre las líneas del fichero exclude-hook.txt ubicado en el raíz del proyecto\r# en busca de ficheros o patrones a excluir. No interesa formatear y validar por\r# ejemplo, librerías externas como Jasmine, que no tienen por qué seguir la misma\r# guía de estilo de nuestro proyecto.\rwhile read line || [ -n \u0026#34;$line\u0026#34; ]\rdo\r# Coincidencia encontrada. Se excluye el fichero.\rif [ \u0026#34;${file#*$line}\u0026#34; != \u0026#34;$file\u0026#34; ]; then\recho \u0026#34;Excluido $file\u0026#34;\rexcluded=true\rbreak\rfi\r# \u0026#39;\u0026lt; exclude-hook.txt\u0026#39; es el equivalente a \u0026#39;cat exclude-hook.txt\u0026#39;\rdone \u0026lt; exclude-hook.txt\rif [ \u0026#34;$excluded\u0026#34; = true ]; then\rcontinue\rfi\rresult=$(jshint $file | egrep \u0026#34;error\u0026#34;)\recho $result\rif [ \u0026#34;$result\u0026#34; != \u0026#34;\u0026#34; ]; then\recho \u0026#34;JSHint fallido: $file\u0026#34;\recho \u0026#34;$(jshint $file)\u0026#34;\rpass=false\relse\recho \u0026#34;JSHint validado: $file\u0026#34;\rbeautify=$(js-beautify $file -r -P --config .beautifyrc)\radd=$(git add $file)\rfi\rdone\recho \u0026#34;Validación de Javascript completa\u0026#34;\rif ! $pass; then\recho \u0026#34;Es necesario corregir los errores mostrados por JSHint. Abortando commit.\u0026#34;\rexit 1\relse\recho \u0026#34;Validación y formateado satisfactorios.\u0026#34;\rexit 0\rfi En primer lugar filtraremos los archivos que se están comiteando, y nos quedaremos solo con los que tienen extensión .js. Además, en el raíz del repositorio, en un fichero llamado exclude-hook.txt, añadiremos patrones, que si son encontrados en las rutas del fichero, hará que se excluya al fichero del proceso. Ficheros que por ejemplo no queremos que sean validados y formateados, librerías externas de terceros, como Jasmine, jQuery, archivos minimizados, etc. Un ejemplo de fichero:\n.min.js\rjasmine\rsource/lib De esta manera ignoraremos todo lo que esté en source/lib, contenga la palabra jasmine o contenga los caracteres .min.js.\nIremos pasando fichero por fichero JSHint, si hay algún error se mostrará en la consola, si no hay ningún error en el fichero este se formatea automáticamente, y se hace git add para añadir los cambios hechos en el fichero. Una vez validados todos, comprobaremos si hubo algún error en alguno, si lo hubo saldremos con código 1, que impide que se haga el commit. En caso de que todo esté bien, se sale con código 0 y nuestro commit será enviado al repositorio correctamente.\nDebo decir que formatear el código Javascript no es para lo que está pensado el hook pre-commit, en él, siendo estrictos, solo deberían llevarse a cabo tareas que no modificasen el código, como son validar el código, ejecución de pruebas unitarias, etc. Por ejemplo este script no funcionaría correctamente, en un caso más avanzado, como sería commitear sólo una parte de un fichero.\nLo ideal sería que cada desarrollador tuviese configurado su editor para formatear el código, pero bueno, en este caso, por el bien de que todos los ficheros tengan la misma guía de estilos, este aspecto representa un mal menor.\nUn script de mucha utilidad, que evitará que subamos archivos con errores de sintáxis o de estilo. Puedes ampliar información sobre hooks en la página de Git, o en Git Hooks.\n","summary":"A la hora de trabajar en equipo, tener una guía de estilos definida es de vital importancia."},{"url":"/blog/concatenar-llamadas-a-m%C3%A9todos-en-javascript/","title":"Concatenar llamadas a métodos en Javascript","content":"Vamos a ver de una manera rápida, como podemos concatenar llamadas a distintos métodos sobre un mismo objeto en Javascript (en inglés, Method Chaining in JavaScript). Este patrón, es utilizado en el popular framework jQuery, en el cual pueden llamarse a varios métodos sobre un selector jQuery. Por ejemplo:\n$(\u0026#34;#selector\u0026#34;).find(\u0026#34;.square\u0026#34;).css(\u0026#34;height\u0026#34;, \u0026#34;100px\u0026#34;).show();\r// En caso de concatenar muchos métodos\r$(\u0026#34;#selector\u0026#34;)\r.find(\u0026#34;.square\u0026#34;)\r.css(\u0026#34;height\u0026#34;, \u0026#34;100px\u0026#34;)\r.show();\r Que es más corto, o más legible (para gustos los colores) que esto:\nvar $selector = $(\u0026#34;#selector\u0026#34;);\r$selector.find(\u0026#34;.square\u0026#34;);\r$selector.css(\u0026#34;height\u0026#34;, \u0026#34;100px\u0026#34;)\r$selector.show();  Bien, vamos a ver como implementar este patrón en Javascript puro, supongamos un objeto tonto, con 2 métodos sencillos como el siguiente:\nvar Widget = function(param1, param2) {\rthis.msg1 = param1;\rthis.msg2 = param2;\r};\rWidget.prototype.method1 = function() {\ralert(this.msg1);\r};\rWidget.prototype.method2 = function() {\ralert(this.msg2);\r};\rvar instancia = new Widget(\u0026#34;Hola\u0026#34;, \u0026#34;Mundo\u0026#34;);  Si quisieramos llamar a los 2 métodos, deberíamos hacerlo de la siguiente manera:\ninstancia.method1();\rinstancia.method2();  Y si intentamos concatenar directamente las llamadas, ejecutará el primer método, pero fallará el segundo:\ninstancia.method1().method2();\r// Uncaught TypeError: Cannot read property \u0026#39;method2\u0026#39; of undefined  ¿Como hacerlo funcionar? Es sencillo, tan solo deberemos añadir en los métodos return this; , de esta manera cuando se llame a method1 se devolverá el objeto, y al llamar al siguiente método ya no dará undefined, puesto que al haberse devuelto el objeto en el método anterior, ya encuentra la referencia para poder llamar a method2. Así queda el código:\nvar Widget = function(param1, param2) {\rthis.msg1 = param1;\rthis.msg2 = param2;\r};\rWidget.prototype.method1 = function() {\ralert(this.msg1);\rreturn this;\r};\rWidget.prototype.method2 = function() {\ralert(this.msg2);\rreturn this;\r};\rvar instancia = new Widget(\u0026#34;Hola\u0026#34;, \u0026#34;Mundo\u0026#34;);\rinstancia.method1().method2();  ¿Sencillo verdad? Este patrón de diseño se conoce como Fluent interface. Usarlo o no ya es cuestión de gustos.\n","summary":"Vamos a ver de una manera rápida, como podemos concatenar llamadas a distintos métodos sobre un mismo objeto en Javascript (en inglés, Method Chaining in JavaScript)."},{"url":"/blog/width-de-jquery-sin-redondeo/","title":"Width() de jQuery sin redondeo","content":"Un tip muy rápido y muy sencillo, pero que no conocía. Por defecto si haces uso de los métodos .width() y .height() de jQuery, los valores devueltos se encuentran redondeados. Si en alguna ocasión necesitas con precisión conocer los decimales, puedes utilizar el método getBoundingClientRect() incorporado en ES4 y soportado por todos los navegadores. Por ejemplo el width se obtendría de la siguiente manera:\n$(\u0026#34;#selector\u0026#34;)[0].getBoundingClientRect().width  ","summary":"Un tip muy rápido y muy sencillo, pero que no conocía."},{"url":"/blog/lanzar-fichero-batch-.bat-sin-mostrar-la-consola-en-windows/","title":"Lanzar fichero batch (.bat) sin mostrar la consola en Windows","content":"En mi día a día suelo trabajar en entorno Windows, y hay ciertos atajos de teclado y acciones, como backups de algunos proyectos, que tengo automatizadas con un simple fichero .bat, que ejecuto a través de un comando a través de Autohotkey (algún día escribiré un poco sobre esta utilidad para mejorar la productividad en Windows).\nPor si te resulta molesto que esté la consola abierta mientras se ejecuta el script, hay una manera sencilla de impedirlo, como pude encontrar en esta pregunta de Superuser. Copia el siguiente miniscript en un fichero con extensión .vbs en la misma carpeta que tu bat, y ejecutalo en lugar del .bat\nSet oShell = CreateObject (\u0026#34;Wscript.Shell\u0026#34;) Dim strArgs\rstrArgs = \u0026#34;cmd /c testing.bat\u0026#34;\roShell.Run strArgs, 0, false Simplemente cambia testing.bat por el nombre de tu fichero y listo.\n","summary":"En mi día a día suelo trabajar en entorno Windows, y hay ciertos atajos de teclado y acciones, como backups de algunos proyectos, que tengo automatizadas con un simple fichero ."},{"url":"/blog/trim-trailing-white-space-en-un-shortcut-en-sublime/","title":"Trim trailing white space en un shortcut en Sublime","content":"Sublime permite definir por medio de sus ficheros de configuración, una opción que cuando trabajo solo suelo tener activada, pero que en ocasiones trabajando en equipo no es muy recomendable.\nLa opción es la de eliminar los espacios sobrantes en un archivo. Por defecto en sublime viene desactivada, pero es posible activarla para que Sublime se encargue de eliminar esos innecesarios espacios al guardar un archivo. Si esto es lo que buscas, simplemente abre tu archivo de Settings \u0026#8211; User, y añade la siguiente opción: \u0026quot;trim_trailing_white_space_on_save\u0026quot;: true\n¿Por qué no tenerlo siempre activado? Actualmente estoy trabajando en equipo, y cada persona trabaja con su editor favorito configurado a su gusto. De hecho en nuestro proyecto cada uno usamos un editor distinto (NetBeans, Brackets, Notepad++, Eclipse). Puede resultar bastante confuso tocar el fichero de un compañero, guardar y subir con los espacios en blancos eliminados. Quizás cuando ese compañero vaya a hacer commit de sus cambios y necesite mergear, no le haga mucha gracia ver cambios por todos lados y tener que revisar todas las líneas para ver si hay cambios. Hay mecanismos para que al comparar no salten esas diferencias, pero no todo el mundo las conoce ni las quiere conocer.\nPor eso me propuse poder ejecutar el limpiado de espacios, pero en lugar de al guardar, en un atajo de teclado, así podría limpiar mis archivos sin interferir en los del resto. La opción más fácil era instalar una extensión (Trailing Spaces), pero ya tengo Sublime cargado de extensiones y me parecía innecesario cargarlo con una más, con muchas opciones que probablemente no use y un gasto innecesario de recursos.\nLa solución es sencilla, Sublime tiene un plugin por default que realiza la acción, asi que solamente hay que modificarlo para que ejecute la acción en un atajo de teclado en lugar de al guardar el archivo. Podemos ver el plugin en la siguiente ruta: \\Sublime\\Data\\Packages\\Default\nEl archivo es _trim_trailing_white_space.py._\nimport sublime, sublime_plugin\rclass TrimTrailingWhiteSpace(sublime_plugin.EventListener):\rdef on_pre_save(self, view):\rif view.settings().get(\u0026#34;trim_trailing_white_space_on_save\u0026#34;) == True:\rtrailing_white_space = view.find_all(\u0026#34;[\\t]+$\u0026#34;)\rtrailing_white_space.reverse()\redit = view.begin_edit()\rfor r in trailing_white_space:\rview.erase(edit, r)\rview.end_edit(edit)\rclass EnsureNewlineAtEof(sublime_plugin.EventListener):\rdef on_pre_save(self, view):\rif view.settings().get(\u0026#34;ensure_newline_at_eof_on_save\u0026#34;) == True:\rif view.size() \u0026gt; 0 and view.substr(view.size() - 1) != \u0026#39;\\n\u0026#39;:\redit = view.begin_edit()\rview.insert(edit, view.size(), \u0026#34;\\n\u0026#34;)\rview.end_edit(edit) Podéis modificar ese mismo fichero, yo preferí crearme otro distinto, por no tocar nada de lo que trae Sublime por defecto, y le puse un nombre super original: _trim_trailing_white_space2.py,_ en la misma carpeta. El código es el siguiente:\nimport sublime, sublime_plugin\rdef trim_trailing_white_space2(view):\rtrailing_white_space2 = view.find_all(\u0026#34;[\\t]+$\u0026#34;)\rtrailing_white_space2.reverse()\redit = view.begin_edit()\rfor r in trailing_white_space2:\rview.erase(edit, r)\rview.end_edit(edit)\rclass TrimTrailingWhiteSpace2Command(sublime_plugin.TextCommand):\rdef run(self, edit):\rtrim_trailing_white_space2(self.view) Para terminar, abrimos el archivo Key Bindings \u0026#8211; User y añadimos el siguiente shortcut:\n{ \u0026#34;keys\u0026#34;: [\u0026#34;ctrl+alt+shift+t\u0026#34;], \u0026#34;command\u0026#34;: \u0026#34;trim_trailing_white_space2\u0026#34; }  Con la combinación de teclas que os sea más cómoda. Et voilà! Eso es todo.\nLo anterior para la versión 2 de Sublime, si lo queremos funcionando en la 3 el código es el siguiente:\nimport sublime, sublime_plugin\rclass TrimTrailingWhiteSpace2Command(sublime_plugin.TextCommand):\rdef run(self, edit):\rtrailing_white_space = self.view.find_all(\u0026#34;[\\t]+$\u0026#34;)\rtrailing_white_space.reverse()\rfor r in trailing_white_space:\rself.view.erase(edit, r)\rclass TrimTrailingWhiteSpace2(sublime_plugin.EventListener):\rdef run(self, view):\rview.run_command(\u0026#34;trim_trailing_white_space2\u0026#34;) Solución encontrada en: Stackoverflow (3ª respuesta)\n","summary":"Sublime permite definir por medio de sus ficheros de configuración, una opción que cuando trabajo solo suelo tener activada, pero que en ocasiones trabajando en equipo no es muy recomendable."},{"url":"/blog/depuraci%C3%B3n-remota-en-smart-tv-con-console.io/","title":"Depuración remota en Smart TV con console.io","content":"Hace algún tiempo hablé de Weinre, como opción para depurar de forma remota nuestras aplicaciones Javascript. Era una opción bastante buena para dispositivos Android y Smarts TV de LG, pero cuando fuí a depurar la aplicación que estamos desarrollando en una Smart TV de Samsung, me llevé la sorpresa de que las televisiones Samsung, deben hacer algo por dentro que sobreescribe el método console del navegador, y con Weinre no podía ver ninguno de los logs que había puesto en el código.\nRapidamente mis compañeros y yo pensamos en elaborar un propio debugger muy simple con un script en PHP, pero pronto comenzaron a surgir los inconvenientes y desechamos la idea. Fue de esta manera como nos topamos con Console.io, una consola web remota que cumplía de largo con todas nuestras necesidades. Además es totalmente compatible con diferentes modelos de Smart TV de distintos años, entre ellos la mencionada Samsung que usamos para pruebas. Según su página web:\n Toshiba TV (2011, 2012, 2013) LG NetCast TV (2011, 2012, 2013) Philips NetTV (2011, 2012, 2013) Samsung TV (2010, 2011, 2012, 2013) Panasonic TV (2012, 2013) Technika Avtrex STB Sony (BDP-S4100) Hopper Dish (Hopper) Firefox, Safari, Opera, Chrome, Maple, PhantomJS and IE iPhone, iPod, iPad, Android browser, windows 8 phone etc  Vamos a ver en unos sencillos pasos como instalar Console.io rapidamente. Se instala como un módulo de Node.js, así que deberemos instalar Node.js si no lo tenemos ya instalado. Antes de nada, vamos a descargar todos los archivos necesarios, podéis descargarlo en formato TAR, ZIP o descargarlo vía git desde la página web de github del proyecto.  En principio no serán necesarios los archivos, ya que con el siguiente paso debería ser suficiente, pero por si acaso no lo es, luego explico como hacerlo funcionar. Una vez descargado, abrimos la consola e instalamos Console.io como paquete npm mediante el siguiente comando:\nnpm install -g xconsole.io De esta manera una vez terminen de realizarse todas las operaciones en la consola, se habrá instalado correctamente y podremos comenzar a usarlo. Para ello simplemente abriremos la consola, y ejecutaremos el siguiente comando:\nconsoleio Y aparecerá en consola el siguiente mensaje:\nStarting Console.IO\rConsole.IO is run at http://localhost:8082 Con esto ya estaría instalado, simplemente abrimos la dirección del servidor y comprobamos que todo cargue correctamente. Deberíamos ver algo así:\nEn mi portátil personal fue suficiente con estos pasos, en el del trabajo por alguna razón que no he investigado, no debió añadirse correctamente la ruta hasta el Console.io, y al abrir la url del servidor, me apareció un error de este tipo:\nError: ENOENT, stat 'C:\\Users\\dist\\app\\index.html'\nEsto sucede porque se intenta buscar el Console.io en el directorio en el cual estoy situado actualmente en la consola, y no encuentra los archivos necesarios para ejecutarse. Lo que hice fue copiarme todas las carpetas del Console.io en mi servidor wamp (puede ser en cualquier directorio, Mis Documentos, en el escritorio). Y en la barra de tareas tengo un acceso directo a un .bat muy sencillo, que se coloca en dicha carpeta y una vez allí lanza el Console.io:\ncd C:\\wamp\\www\\jsconsole\rconsoleio Una vez funcionando de la manera que sea, ya solo nos queda añadir un script a nuestra aplicación, para poder recibir en Console.io los mensajes de depuración. Siendo 192.168.1.15, nuestra máquina con nuestra ip (en vuestro caso deberéis usar la IP que tenga vuestro ordenador), añadiríamos lo siguiente:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;http://192.168.1.15:8082/console.io.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Ya solo nos queda lanzar nuestra aplicación, desde el dispositivo que queramos, y podremos ver desde la url de Console.io todos los logs que van saliendo. Podemos ver la estructura de los objetos, y utilizar los distintos método de la consola, info, error, warning, hasta funciona console.time y console.timeEnd.\nEn la parte superior izquierda, veremos los dispositivos conectados (los que podemos debuggear), en este caso tenemos una ejecución de una televisión LG Smart TV de 2013, que hemos abierto para depurar, y otra ejecución desde un ordenador con un chrome versión 38, que aparece con una bolita verde. Para conectar con la ejecución de un dispositivo, simplemente hacemos doble click sobre la bolita verde, y empezaremos a ver y recibir logs del dispositivo seleccionado.\nSe pueden guardar los logs, pausar la ejecución, filtrar los tipos de logs que queremos ver, podemos ver el código fuente de la página, realizar capturas de pantalla, recargar la aplicación sin tener que lanzarla de nuevo, ver las características del dispositivo, objeto navigator\u0026#8230;\nEn fin muchas cosas, es cuestión de investigar y trastear por su interfaz gráfica, que es bastante intuitiva y nos iremos encontrando cosas que en un determinado momento pueden sernos de gran utilidad. En la siguiente imagen vemos algunos logs, un Hola mundo, el valor de un objeto, las propiedades de un array. Además desde el editor podemos ejecutar código Javascript, muy útil para conocer propiedades de elementos del DOM, manipularlos o lanzar cualquier función que nos haga falta de manera manual.\nEn resumen Console.io es una herramienta muy potente, que nos puede arrojar luz cuando probamos en distintos tipos de dispositivo desde donde no es posible consultar una consola de errores, o en caso de poder consultarla ésta es muy limitada. A mí me ha sacado las castañas del fuego más de una vez, probando en las Smart TV. No dudéis en ampliar información en la documentación oficial.\n Console.io Página en Github  ","summary":"Hace algún tiempo hablé de Weinre, como opción para depurar de forma remota nuestras aplicaciones Javascript."},{"url":"/blog/depurar-maquetaci%C3%B3n-css-con-una-l%C3%ADnea-de-c%C3%B3digo/","title":"Depurar maquetación CSS con una línea de código","content":"Llevo aproximadamente 8 años trabajando como desarrollador Javascript principalmente, y la verdad es que cada día uno sigue descubriendo cosas que no dejan de sorprenderle. En este caso, un código de una línea, que sirve para visualizar el layout de todos los elementos CSS de una página.\nEs un código ideal para depurar, ver donde se te descuadra un div, donde se te ha colado un margen, controlar al milímetro todo. El código en cuestión es el siguiente. Versión para consolas, que cuentan con el siguiente alias: $$('*') equivalente a document.querySelectorAll('*')\n[].forEach.call($$(\u0026#34;*\u0026#34;),function(a){\ra.style.outline=\u0026#34;1px solid #\u0026#34;+(~~(Math.random()*(1\u0026lt;\u0026lt;24))).toString(16)\r})  Asi que si deseas incorporarlo desde código, en lugar de desde la consola, simplemente:\n[].forEach.call(document.querySelectorAll(\u0026#34;*\u0026#34;),function(a){\ra.style.outline=\u0026#34;1px solid #\u0026#34;+(~~(Math.random()*(1\u0026lt;\u0026lt;24))).toString(16)\r})  Podemos ver como con solo este código, podemos tener un generador de colores aleatorio en formato hexadecimal: (~~(Math.random()*(1\u0026lt;\u0026lt;24))).toString(16)\nDe este tipo de código en una línea, se puede aprender bastante Javascript. Recomiendo la lectura del artículo creado por Arqex en su blog, pues me parece interesante y yo al menos aprendí cosas.\nEnlace: Código original de Addy Osmani\n","summary":"Llevo aproximadamente 8 años trabajando como desarrollador Javascript principalmente, y la verdad es que cada día uno sigue descubriendo cosas que no dejan de sorprenderle."},{"url":"/blog/cambia-el-separador-de-palabras-en-sublime-text/","title":"Cambia el separador de palabras en Sublime Text","content":"Una de las cosas más tontas, pero que descubrí hace poco. Por defecto, Sublime Text tiene definido determinados caráceteres como separador de palabras. El punto, la coma, el signo del dólar, etc. En determinadas ocasiones, para determinados lenguajes (o para todos), podemos querer modificar los carácteres considerados como separador de palabra. Por ejemplo, en CSS, es muy común utilizar en las clases nombres separando las palabras con guiones, es una convención bastante extendida. Creas tu nuevo estilo en CSS, vas a copiarlo y te ves obligado a seleccionarlo ya que con doble click no se selecciona todo.\nEs una buena idea por tanto, al menos para CSS eliminar el carácter \u0026#8220;-\u0026#8221; como separador. Para ello, en Sublime vamos al menú Preferences -\u0026gt; Settings \u0026#8211; Default. Y buscamos la siguiente propiedad:\n// Characters that are considered to separate words\r\u0026#34;word_separators\u0026#34;: \u0026#34;./\\\\()\\\u0026#34;\u0026#39;-:,.;\u0026lt;\u0026gt;~!@#$%^\u0026amp;*|+=[]{}`~?\u0026#34;,  La copiamos, y podemos cambiarla globalmente en Preferences -\u0026gt; Settings \u0026#8211; User, o para un lenguaje en específico. En este caso optamos por esta última opción, abrimos un archivo CSS cualquiera, y vamos a Preferences -\u0026gt; Settings \u0026#8211; More -\u0026gt; Syntax \u0026#8211; Specific \u0026#8211; User. Si no has definido ninguna preferencia para el lenguaje específico, aparecerá un archivo vacío. Pegaremos la propiedad y la encerraremos entre llaves de la siguiente manera, eliminando el carácter \u0026#8220;\u0026#8211;\u0026#8220;:\n{\r\u0026#34;word_separators\u0026#34;: \u0026#34;./\\\\()\\\u0026#34;\u0026#39;:,.;\u0026lt;\u0026gt;~!@#$%^\u0026amp;*|+=[]{}`~?\u0026#34;\r}  Puedes utilizar un proceso similar para otros lenguajes, por ejemplo si utilizas jQuery en Javascript y/o PHP, puede resultarnos interesante eliminar el carácter \u0026#8220;$\u0026#8221; como separador de palabra. Por este tipo de detalles personalizables son por los que me encanta Sublime.\n","summary":"Una de las cosas más tontas, pero que descubrí hace poco."},{"url":"/blog/detectar-fin-de-una-transici%C3%B3n/animaci%C3%B3n-css3-con-javascript/","title":"Detectar fin de una transición/animación CSS3 con Javascript","content":"Nunca me había visto en la necesidad de detectar cuando una transición CSS3 termina, pero el otro día en el trabajo, para desplegar cierta información, estamos utilizando 2 contenedores, y al añadir una clase se activa una animación CSS3 que va aumentando el margen izquierdo del div hasta que aparece el siguiente. Para ello estamos utilizando eventos de teclado, si pulsamos flecha derecha va hacia la derecha, en caso de pulsar la flecha izquierda, hacia la izquierda, muy sencillito.\n¿Y qué pasa si pulsamos varias veces antes de que la animación termine? Pues que parece que va a tirones, y lo que es un efecto de transición muy elegante se convierte en un efecto muy desagradable. No estaba al tanto, pero cuando un elemento presenta una animación puramente en CSS3, en función del navegador, podemos suscribirnos a un evento que nos informará cuando la transición ha terminado. En este proyecto estamos utilizando jQuery, asi que la solución es bien sencilla:\nSolución para transiciones:\nvar ended = false;\r$(\u0026#34;#selector\u0026#34;).bind(\u0026#34;transitionend\rwebkitTransitionEnd oTransitionEnd MSTransitionEnd\u0026#34;, function(){ ended = true;\r});  Solución para animaciones:\nvar ended = false;\r$(\u0026#34;#someSelector\u0026#34;).bind(\u0026#34;animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd\u0026#34;, function(){\rended = true;\r});  Si no deseas usar jQuery, en Modernizr tienen esto:\nfunction transitionEndEventName () {\rvar i,\rundefined,\rel = document.createElement(\u0026#39;div\u0026#39;),\rtransitions = {\r\u0026#39;transition\u0026#39;:\u0026#39;transitionend\u0026#39;,\r\u0026#39;OTransition\u0026#39;:\u0026#39;otransitionend\u0026#39;, // oTransitionEnd in very old Opera\r \u0026#39;MozTransition\u0026#39;:\u0026#39;transitionend\u0026#39;,\r\u0026#39;WebkitTransition\u0026#39;:\u0026#39;webkitTransitionEnd\u0026#39;\r};\rfor (i in transitions) {\rif (transitions.hasOwnProperty(i) \u0026amp;\u0026amp; el.style[i] !== undefined) {\rreturn transitions[i];\r}\r}\r//TODO: throw \u0026#39;TransitionEnd event is not supported in this browser\u0026#39;; }  Y se utiliza de la siguiente manera:\nvar transitionEnd = transitionEndEventName();\relement.addEventListener(transitionEnd, theFunctionToInvoke, false);  Encontré la solución en StackOverflow:\n Callback when CSS3 transition finishes How do I normalize CSS3 Transition functions across browsers?  ","summary":"Nunca me había visto en la necesidad de detectar cuando una transición CSS3 termina, pero el otro día en el trabajo, para desplegar cierta información, estamos utilizando 2 contenedores, y al añadir una clase se activa una animación CSS3 que va aumentando el margen izquierdo del div hasta que aparece el siguiente."},{"url":"/blog/depurar-remotamente-aplicaciones-html-con-weinre/","title":"Depurar remotamente aplicaciones HTML con Weinre","content":"Nunca me había visto en la necesidad de hacer uso de esta funcionalidad, normalmente desarrollo aplicaciones y páginas web y las pruebo directamente en el navegador, para depurar el código Javascript suelo utilizar las herramientas de desarrollador de Chrome. ¿En qué casos podemos necesitar depurar remotamente? La respuesta es sencilla, en dispositivos en los cuales no podemos acceder a herramientas de depuración del navegador. Desde la llegada de HTML5 y sus funcionalidades, es posible desarrollar aplicaciones para móviles, Smart TV\u0026#8230; Actualmente estoy trabajando en desarrollo de aplicaciones para Smart TV, y me ví en la necesidad de depurar remotamente al realizar pruebas en las teles directamente.\n¿Como depurar remotamente? Para ellos podemos utilizar Weinre, que se instala como un módulo de Node.js. Lo primero de todo, como es lógico será instalar Node.js si no lo tenemos ya instalado. Una vez lo tenemos, podremos instalar Weinre a través de npm, tan solo debemos ir a la consola y ejecutar el siguiente comando:\nnpm -g install weinre Yo utilizo Windows, aunque también tengo Ubuntu, en sistemas Linux deberemos ejecutar el comando precedido de sudo probablemente. Así de simple y así de fácil, ya tenemos instalado weinre. Weinre ejecutará un servidor en nuestra máquina, que será la interfaz a través de la cual depuraremos nuestro aplicación HTML5, que se ejecutará en otro dispositivo (móvil, tablet, Smart TV, etc).\nLa interfaz es practicamente la misma que las developer tools de Chrome, asi que si sueles usarla te desenvolverás con soltura en ella, aunque tiene algunas limitaciones.\nPara ejecutar el servidor de weinre, vamos a la consola y ejecutamos:\nweinre --boundHost 192.168.1.2 En en este caso he utilizado la IP que tengo asignada en mi ordenador en mi red local, 192.168.1.2. Podríamos ejecutar en localhost, pero en ese caso solo podríamos hacer pruebas desde nuestro ordenador, que podría ser util quizás para depurar desde algún emulador. De esta manera, podremos depurar aplicaciones de otros dipositivos que se ejecuten en nuestra misma red local. El comando es el más simple, puedes teclear weinre \u0026#8211;help y ver otro tipo de opciones, como el puerto por el que se lanza, pero en mi caso la configuración por defecto me vale. Si es la primera vez que ejecutas weinre, y estás en windows, probablemente el Firewall pida permisos para que weinre acceda a la red. Veremos un mensaje que confirma que se lanza el servidor:\nYa podemos abrir en el navegador la url, en mi caso: http://192.168.1.2:8080/ El siguiente paso es muy simple, tan solo deberemos incluir un script en nuestra aplicación, para que podamos depurar remotamente. Para el ejemplo en concreto, nuestra SmartTV está conectada en la misma red local, por lo que simplemente añadimos la siguiente línea en nuestra aplicación:\n\u0026lt;script src=\u0026#34;http://192.168.1.2:8080/target/target-script-min.js#instancia\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Observemos que se ha concatenado #instancia, ¿Qué quiere decir esto? Que podemos crear distintas instancias para depurar remotamente, podríamos montar weinre en un ordenador, y conectarnos varias personas a él, y no sufriremos interferencias en los logs si cada uno tenemos un hashtag diferente. Siguiendo con el ejemplo, para poder conectar con la interfaz desde la que depuraremos, iremos a la siguiente url: http://192.168.1.2:8080/client/#instancia Y nos encontraremos con una interfaz bastante familiar:\nYa solo nos queda realizar pruebas, ejecutaremos nuestra aplicación con el script incluido, y donde pone Target comenzaremos a ver las ejecuciones. Al igual que en Chrome, podemos ir a la pestaña Elements, ver el código fuente cargado, editarlo, añadir o quitar estilos css. También disponemos de Resources, Network, Timeline y Console, desde donde podremos visualizar los console.log. Por lo que he probado weinre tarda un poco en inicializarse, por lo que es conveniente que ejecutes los console.log con un timeout, de lo contrario puede que no aparezcan:\nsetTimeout(function() { console.log(\u0026#34;Hola Mundo\u0026#34;); }, 2000);  En este caso lo he ejecutado desde mi mismo ordenador, pero en el trabajo pruebo sin problemas con un televisor LG. Así vemos que hay una conexión, una vez ejecutamos la aplicación:\nEste es el ejemplo, un simple Hola Mundo con un console.log al cargar la página:\nEn la pestaña consola observamos que recibimos el console.log:\nDesde la pestaña Elements, podemos modificar la página, los estilos, en este caso cambiamos el color de fondo para el body:\nY efectivamente, vemos que se cambia correctamente:\nDesde la consola podemos inspeccionar el valor de las variables javascript. ¿Qué limitaciones tiene? Por ejemplo, al editar estilos CSS, y al escribir, no te va sugiriendo para autocompletar las propiedades. Tampoco podemos ejecutar debugger, para depurar y añadir puntos de parada e ir inspeccionando paso por paso nuestros scripts. Eso sería ya simplemente increíble, pero con todo lo expuesto, weinre parece una de las mejores herramientas a la hora de hacer remote debugging. Toda esta información y más está en la página web de Weinre, asi que si se te queda corta esta entrada, no dudes en consultar toda la información en su web.\nEnlaces: Web oficial de Weinre\n","summary":"Nunca me había visto en la necesidad de hacer uso de esta funcionalidad, normalmente desarrollo aplicaciones y páginas web y las pruebo directamente en el navegador, para depurar el código Javascript suelo utilizar las herramientas de desarrollador de Chrome."}]